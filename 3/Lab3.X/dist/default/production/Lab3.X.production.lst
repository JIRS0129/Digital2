

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Feb 12 00:19:04 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 2.10
    31                           ; Generated 31/07/2019 GMT
    32                           ; 
    33                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F887 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0008                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  000C                     	;# 
    77  000D                     	;# 
    78  000E                     	;# 
    79  000E                     	;# 
    80  000F                     	;# 
    81  0010                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0013                     	;# 
    85  0014                     	;# 
    86  0015                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001D                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  0081                     	;# 
   100  0085                     	;# 
   101  0086                     	;# 
   102  0087                     	;# 
   103  0088                     	;# 
   104  0089                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  008F                     	;# 
   109  0090                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0093                     	;# 
   114  0093                     	;# 
   115  0094                     	;# 
   116  0095                     	;# 
   117  0096                     	;# 
   118  0097                     	;# 
   119  0098                     	;# 
   120  0099                     	;# 
   121  009A                     	;# 
   122  009B                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009E                     	;# 
   126  009F                     	;# 
   127  0105                     	;# 
   128  0107                     	;# 
   129  0108                     	;# 
   130  0109                     	;# 
   131  010C                     	;# 
   132  010C                     	;# 
   133  010D                     	;# 
   134  010E                     	;# 
   135  010F                     	;# 
   136  0185                     	;# 
   137  0187                     	;# 
   138  0188                     	;# 
   139  0189                     	;# 
   140  018C                     	;# 
   141  018D                     	;# 
   142  0000                     	;# 
   143  0001                     	;# 
   144  0002                     	;# 
   145  0003                     	;# 
   146  0004                     	;# 
   147  0005                     	;# 
   148  0006                     	;# 
   149  0007                     	;# 
   150  0008                     	;# 
   151  0009                     	;# 
   152  000A                     	;# 
   153  000B                     	;# 
   154  000C                     	;# 
   155  000D                     	;# 
   156  000E                     	;# 
   157  000E                     	;# 
   158  000F                     	;# 
   159  0010                     	;# 
   160  0011                     	;# 
   161  0012                     	;# 
   162  0013                     	;# 
   163  0014                     	;# 
   164  0015                     	;# 
   165  0015                     	;# 
   166  0016                     	;# 
   167  0017                     	;# 
   168  0018                     	;# 
   169  0019                     	;# 
   170  001A                     	;# 
   171  001B                     	;# 
   172  001B                     	;# 
   173  001C                     	;# 
   174  001D                     	;# 
   175  001E                     	;# 
   176  001F                     	;# 
   177  0081                     	;# 
   178  0085                     	;# 
   179  0086                     	;# 
   180  0087                     	;# 
   181  0088                     	;# 
   182  0089                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  008F                     	;# 
   187  0090                     	;# 
   188  0091                     	;# 
   189  0092                     	;# 
   190  0093                     	;# 
   191  0093                     	;# 
   192  0093                     	;# 
   193  0094                     	;# 
   194  0095                     	;# 
   195  0096                     	;# 
   196  0097                     	;# 
   197  0098                     	;# 
   198  0099                     	;# 
   199  009A                     	;# 
   200  009B                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  009F                     	;# 
   205  0105                     	;# 
   206  0107                     	;# 
   207  0108                     	;# 
   208  0109                     	;# 
   209  010C                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  010F                     	;# 
   214  0185                     	;# 
   215  0187                     	;# 
   216  0188                     	;# 
   217  0189                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  0000                     	;# 
   221  0001                     	;# 
   222  0002                     	;# 
   223  0003                     	;# 
   224  0004                     	;# 
   225  0005                     	;# 
   226  0006                     	;# 
   227  0007                     	;# 
   228  0008                     	;# 
   229  0009                     	;# 
   230  000A                     	;# 
   231  000B                     	;# 
   232  000C                     	;# 
   233  000D                     	;# 
   234  000E                     	;# 
   235  000E                     	;# 
   236  000F                     	;# 
   237  0010                     	;# 
   238  0011                     	;# 
   239  0012                     	;# 
   240  0013                     	;# 
   241  0014                     	;# 
   242  0015                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0017                     	;# 
   246  0018                     	;# 
   247  0019                     	;# 
   248  001A                     	;# 
   249  001B                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  001D                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  0081                     	;# 
   256  0085                     	;# 
   257  0086                     	;# 
   258  0087                     	;# 
   259  0088                     	;# 
   260  0089                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  008F                     	;# 
   265  0090                     	;# 
   266  0091                     	;# 
   267  0092                     	;# 
   268  0093                     	;# 
   269  0093                     	;# 
   270  0093                     	;# 
   271  0094                     	;# 
   272  0095                     	;# 
   273  0096                     	;# 
   274  0097                     	;# 
   275  0098                     	;# 
   276  0099                     	;# 
   277  009A                     	;# 
   278  009B                     	;# 
   279  009C                     	;# 
   280  009D                     	;# 
   281  009E                     	;# 
   282  009F                     	;# 
   283  0105                     	;# 
   284  0107                     	;# 
   285  0108                     	;# 
   286  0109                     	;# 
   287  010C                     	;# 
   288  010C                     	;# 
   289  010D                     	;# 
   290  010E                     	;# 
   291  010F                     	;# 
   292  0185                     	;# 
   293  0187                     	;# 
   294  0188                     	;# 
   295  0189                     	;# 
   296  018C                     	;# 
   297  018D                     	;# 
   298  0000                     	;# 
   299  0001                     	;# 
   300  0002                     	;# 
   301  0003                     	;# 
   302  0004                     	;# 
   303  0005                     	;# 
   304  0006                     	;# 
   305  0007                     	;# 
   306  0008                     	;# 
   307  0009                     	;# 
   308  000A                     	;# 
   309  000B                     	;# 
   310  000C                     	;# 
   311  000D                     	;# 
   312  000E                     	;# 
   313  000E                     	;# 
   314  000F                     	;# 
   315  0010                     	;# 
   316  0011                     	;# 
   317  0012                     	;# 
   318  0013                     	;# 
   319  0014                     	;# 
   320  0015                     	;# 
   321  0015                     	;# 
   322  0016                     	;# 
   323  0017                     	;# 
   324  0018                     	;# 
   325  0019                     	;# 
   326  001A                     	;# 
   327  001B                     	;# 
   328  001B                     	;# 
   329  001C                     	;# 
   330  001D                     	;# 
   331  001E                     	;# 
   332  001F                     	;# 
   333  0081                     	;# 
   334  0085                     	;# 
   335  0086                     	;# 
   336  0087                     	;# 
   337  0088                     	;# 
   338  0089                     	;# 
   339  008C                     	;# 
   340  008D                     	;# 
   341  008E                     	;# 
   342  008F                     	;# 
   343  0090                     	;# 
   344  0091                     	;# 
   345  0092                     	;# 
   346  0093                     	;# 
   347  0093                     	;# 
   348  0093                     	;# 
   349  0094                     	;# 
   350  0095                     	;# 
   351  0096                     	;# 
   352  0097                     	;# 
   353  0098                     	;# 
   354  0099                     	;# 
   355  009A                     	;# 
   356  009B                     	;# 
   357  009C                     	;# 
   358  009D                     	;# 
   359  009E                     	;# 
   360  009F                     	;# 
   361  0105                     	;# 
   362  0107                     	;# 
   363  0108                     	;# 
   364  0109                     	;# 
   365  010C                     	;# 
   366  010C                     	;# 
   367  010D                     	;# 
   368  010E                     	;# 
   369  010F                     	;# 
   370  0185                     	;# 
   371  0187                     	;# 
   372  0188                     	;# 
   373  0189                     	;# 
   374  018C                     	;# 
   375  018D                     	;# 
   376                           
   377                           	psect	strings
   378  0400                     __pstrings:	
   379  0400                     stringtab:	
   380  0400                     __stringtab:	
   381                           
   382                           ;	String table - string pointers are 1 byte each
   383  0400  1BFF               	btfsc	btemp+1,7
   384  0401  2C0A               	ljmp	stringcode
   385  0402  1383               	bcf	3,7
   386  0403  187F               	btfsc	btemp+1,0
   387  0404  1783               	bsf	3,7
   388  0405  0800               	movf	0,w
   389  0406  0A84               	incf	4,f
   390  0407  1903               	skipnz
   391  0408  0AFF               	incf	btemp+1,f
   392  0409  0008               	return
   393  040A                     stringcode:	
   394  040A                     stringdir:	
   395  040A  3004               	movlw	high stringdir
   396  040B  008A               	movwf	10
   397  040C  0804               	movf	4,w
   398  040D  0A84               	incf	4,f
   399  040E  0782               	addwf	2,f
   400  040F                     __stringbase:	
   401  040F  3400               	retlw	0
   402  0410                     __end_of__stringtab:	
   403  0410                     _dpowers:	
   404  0410  3401               	retlw	1
   405  0411  3400               	retlw	0
   406  0412  340A               	retlw	10
   407  0413  3400               	retlw	0
   408  0414  3464               	retlw	100
   409  0415  3400               	retlw	0
   410  0416  34E8               	retlw	232
   411  0417  3403               	retlw	3
   412  0418  3410               	retlw	16
   413  0419  3427               	retlw	39
   414  041A                     __end_of_dpowers:	
   415  0009                     _PORTE	set	9
   416  0008                     _PORTD	set	8
   417  0007                     _PORTC	set	7
   418  0006                     _PORTB	set	6
   419  0005                     _PORTA	set	5
   420  000C                     _PIR1bits	set	12
   421  000B                     _INTCONbits	set	11
   422  001F                     _ADCON0bits	set	31
   423  001E                     _ADRESH	set	30
   424  0039                     _RC1	set	57
   425  0038                     _RC0	set	56
   426  0089                     _TRISE	set	137
   427  0088                     _TRISD	set	136
   428  0087                     _TRISC	set	135
   429  0086                     _TRISB	set	134
   430  0085                     _TRISA	set	133
   431  009F                     _ADCON1bits	set	159
   432  008C                     _PIE1bits	set	140
   433  0086                     _TRISBbits	set	134
   434  0089                     _TRISEbits	set	137
   435  0085                     _TRISAbits	set	133
   436  0189                     _ANSELHbits	set	393
   437  0188                     _ANSELbits	set	392
   438  041A                     STR_4:	
   439  041A  3443               	retlw	67	;'C'
   440  041B  344F               	retlw	79	;'O'
   441  041C  344D               	retlw	77	;'M'
   442  041D  3400               	retlw	0
   443  041E                     STR_2:	
   444  041E  3453               	retlw	83	;'S'
   445  041F  3431               	retlw	49	;'1'
   446  0420  3400               	retlw	0
   447  0421                     STR_3:	
   448  0421  3453               	retlw	83	;'S'
   449  0422  3432               	retlw	50	;'2'
   450  0423  3400               	retlw	0
   451  0424                     STR_1:	
   452  0424  3425               	retlw	37	;'%'
   453  0425  3464               	retlw	100	;'d'
   454  0426  3400               	retlw	0
   455                           
   456                           ; #config settings
   457  0000                     
   458                           	psect	cinit
   459  000F                     start_initialization:	
   460  000F                     __initialization:	
   461                           
   462                           ; Clear objects allocated to COMMON
   463  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   464  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   465                           
   466                           ; Clear objects allocated to BANK0
   467  0011  1283               	bcf	3,5	;RP0=0, select bank0
   468  0012  1303               	bcf	3,6	;RP1=0, select bank0
   469  0013  01BC               	clrf	__pbssBANK0& (0+127)
   470  0014  01BD               	clrf	(__pbssBANK0+1)& (0+127)
   471  0015  01BE               	clrf	(__pbssBANK0+2)& (0+127)
   472  0016  01BF               	clrf	(__pbssBANK0+3)& (0+127)
   473  0017  01C0               	clrf	(__pbssBANK0+4)& (0+127)
   474  0018                     end_of_initialization:	
   475                           ;End of C runtime variable initialization code
   476                           
   477  0018                     __end_of__initialization:	
   478  0018  0183               	clrf	3
   479  0019  120A  118A  29F3   	ljmp	_main	;jump to C main() function
   480                           
   481                           	psect	bssCOMMON
   482  007A                     __pbssCOMMON:	
   483  007A                     _cursor:	
   484  007A                     	ds	1
   485  007B                     _adcValue:	
   486  007B                     	ds	1
   487                           
   488                           	psect	bssBANK0
   489  003C                     __pbssBANK0:	
   490  003C                     _cont:	
   491  003C                     	ds	1
   492  003D                     _sensor2:	
   493  003D                     	ds	1
   494  003E                     _sensor1:	
   495  003E                     	ds	1
   496  003F                     _contADC:	
   497  003F                     	ds	1
   498  0040                     _adc:	
   499  0040                     	ds	1
   500                           
   501                           	psect	cstackCOMMON
   502  0070                     __pcstackCOMMON:	
   503  0070                     ?_cmdLCD:	
   504  0070                     ?_writeCharLCD:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0070                     ?_setup:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0070                     ?_readADC:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0070                     ?_selCanal:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0070                     ?_configCanal:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0070                     ?_configADC:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0070                     ?_clcLCD:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  0070                     ?_initLCD:	
   526                           ; 1 bytes @ 0x0
   527                           
   528  0070                     ?_writeIntLCD:	
   529                           ; 1 bytes @ 0x0
   530                           
   531  0070                     ?_ISR:	
   532                           ; 1 bytes @ 0x0
   533                           
   534  0070                     ??_ISR:	
   535                           ; 1 bytes @ 0x0
   536                           
   537  0070                     ?_main:	
   538                           ; 1 bytes @ 0x0
   539                           
   540                           
   541                           ; 1 bytes @ 0x0
   542  0070                     	ds	2
   543  0072                     ??_cmdLCD:	
   544  0072                     ??_writeCharLCD:	
   545                           ; 1 bytes @ 0x2
   546                           
   547  0072                     ??_setup:	
   548                           ; 1 bytes @ 0x2
   549                           
   550  0072                     ??_readADC:	
   551                           ; 1 bytes @ 0x2
   552                           
   553  0072                     ??_selCanal:	
   554                           ; 1 bytes @ 0x2
   555                           
   556  0072                     ??_configCanal:	
   557                           ; 1 bytes @ 0x2
   558                           
   559  0072                     ??_configADC:	
   560                           ; 1 bytes @ 0x2
   561                           
   562  0072                     ?___lwdiv:	
   563                           ; 1 bytes @ 0x2
   564                           
   565  0072                     ___lwdiv@divisor:	
   566                           ; 2 bytes @ 0x2
   567                           
   568                           
   569                           ; 2 bytes @ 0x2
   570  0072                     	ds	1
   571  0073                     selCanal@channel:	
   572  0073                     writeCharLCD@character:	
   573                           ; 1 bytes @ 0x3
   574                           
   575                           
   576                           ; 1 bytes @ 0x3
   577  0073                     	ds	1
   578  0074                     ?_writeStrLCD:	
   579  0074                     configCanal@channel:	
   580                           ; 1 bytes @ 0x4
   581                           
   582  0074                     configADC@FOSC:	
   583                           ; 1 bytes @ 0x4
   584                           
   585  0074                     cmdLCD@cmd:	
   586                           ; 1 bytes @ 0x4
   587                           
   588  0074                     writeStrLCD@string:	
   589                           ; 1 bytes @ 0x4
   590                           
   591  0074                     ___lwdiv@dividend:	
   592                           ; 2 bytes @ 0x4
   593                           
   594                           
   595                           ; 2 bytes @ 0x4
   596  0074                     	ds	1
   597  0075                     ?_setCursorLCD:	
   598  0075                     ??_clcLCD:	
   599                           ; 1 bytes @ 0x5
   600                           
   601  0075                     ??_initLCD:	
   602                           ; 1 bytes @ 0x5
   603                           
   604  0075                     setCursorLCD@x:	
   605                           ; 1 bytes @ 0x5
   606                           
   607                           
   608                           ; 1 bytes @ 0x5
   609  0075                     	ds	1
   610  0076                     ??_setCursorLCD:	
   611  0076                     ??_writeStrLCD:	
   612                           ; 1 bytes @ 0x6
   613                           
   614  0076                     ??___lwdiv:	
   615                           ; 1 bytes @ 0x6
   616                           
   617                           
   618                           ; 1 bytes @ 0x6
   619  0076                     	ds	1
   620  0077                     setCursorLCD@y:	
   621  0077                     ___lwdiv@quotient:	
   622                           ; 1 bytes @ 0x7
   623                           
   624                           
   625                           ; 2 bytes @ 0x7
   626  0077                     	ds	2
   627  0079                     ___lwdiv@counter:	
   628                           
   629                           ; 1 bytes @ 0x9
   630  0079                     	ds	1
   631                           
   632                           	psect	cstackBANK0
   633  0020                     __pcstackBANK0:	
   634  0020                     ?___lwmod:	
   635  0020                     writeStrLCD@cont:	
   636                           ; 2 bytes @ 0x0
   637                           
   638  0020                     ___lwmod@divisor:	
   639                           ; 2 bytes @ 0x0
   640                           
   641                           
   642                           ; 2 bytes @ 0x0
   643  0020                     	ds	2
   644  0022                     ___lwmod@dividend:	
   645                           
   646                           ; 2 bytes @ 0x2
   647  0022                     	ds	2
   648  0024                     ??___lwmod:	
   649                           
   650                           ; 1 bytes @ 0x4
   651  0024                     	ds	1
   652  0025                     ___lwmod@counter:	
   653                           
   654                           ; 1 bytes @ 0x5
   655  0025                     	ds	1
   656  0026                     ?_sprintf:	
   657  0026                     sprintf@f:	
   658                           ; 2 bytes @ 0x6
   659                           
   660                           
   661                           ; 1 bytes @ 0x6
   662  0026                     	ds	3
   663  0029                     ??_sprintf:	
   664                           
   665                           ; 1 bytes @ 0x9
   666  0029                     	ds	3
   667  002C                     sprintf@ap:	
   668                           
   669                           ; 1 bytes @ 0xC
   670  002C                     	ds	1
   671  002D                     sprintf@flag:	
   672                           
   673                           ; 1 bytes @ 0xD
   674  002D                     	ds	1
   675  002E                     sprintf@prec:	
   676                           
   677                           ; 1 bytes @ 0xE
   678  002E                     	ds	1
   679  002F                     sprintf@val:	
   680                           
   681                           ; 2 bytes @ 0xF
   682  002F                     	ds	2
   683  0031                     sprintf@sp:	
   684                           
   685                           ; 1 bytes @ 0x11
   686  0031                     	ds	1
   687  0032                     sprintf@c:	
   688                           
   689                           ; 1 bytes @ 0x12
   690  0032                     	ds	1
   691  0033                     ??_writeIntLCD:	
   692                           
   693                           ; 1 bytes @ 0x13
   694  0033                     	ds	3
   695  0036                     writeIntLCD@buffer:	
   696                           
   697                           ; 4 bytes @ 0x16
   698  0036                     	ds	4
   699  003A                     writeIntLCD@numero:	
   700                           
   701                           ; 1 bytes @ 0x1A
   702  003A                     	ds	1
   703  003B                     ??_main:	
   704                           
   705                           ; 1 bytes @ 0x1B
   706  003B                     	ds	1
   707                           
   708                           	psect	maintext
   709  01F3                     __pmaintext:	
   710 ;;
   711 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   712 ;;
   713 ;; *************** function _main *****************
   714 ;; Defined at:
   715 ;;		line 44 in file "newmain.c"
   716 ;; Parameters:    Size  Location     Type
   717 ;;		None
   718 ;; Auto vars:     Size  Location     Type
   719 ;;		None
   720 ;; Return value:  Size  Location     Type
   721 ;;                  1    wreg      void 
   722 ;; Registers used:
   723 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   724 ;; Tracked objects:
   725 ;;		On entry : B00/0
   726 ;;		On exit  : 0/0
   727 ;;		Unchanged: 0/0
   728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   729 ;;      Params:         0       0       0       0       0
   730 ;;      Locals:         0       0       0       0       0
   731 ;;      Temps:          0       1       0       0       0
   732 ;;      Totals:         0       1       0       0       0
   733 ;;Total ram usage:        1 bytes
   734 ;; Hardware stack levels required when called:    4
   735 ;; This function calls:
   736 ;;		_clcLCD
   737 ;;		_configADC
   738 ;;		_configCanal
   739 ;;		_initLCD
   740 ;;		_readADC
   741 ;;		_selCanal
   742 ;;		_setCursorLCD
   743 ;;		_setup
   744 ;;		_writeIntLCD
   745 ;;		_writeStrLCD
   746 ;; This function is called by:
   747 ;;		Startup code after reset
   748 ;; This function uses a non-reentrant model
   749 ;;
   750                           
   751                           
   752                           ;psect for function _main
   753  01F3                     _main:	
   754  01F3                     l1551:	
   755                           ;incstack = 0
   756                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   757                           
   758                           
   759                           ;newmain.c: 46:     setup();
   760  01F3  120A  118A  2471  120A  118A  	fcall	_setup
   761  01F8                     l1553:	
   762                           
   763                           ;newmain.c: 47:     configADC(1);
   764  01F8  3001               	movlw	1
   765  01F9  120A  118A  23C9  120A  118A  	fcall	_configADC
   766  01FE                     l1555:	
   767                           
   768                           ;newmain.c: 48:     configCanal(10);
   769  01FE  300A               	movlw	10
   770  01FF  120A  118A  201C  120A  118A  	fcall	_configCanal
   771  0204                     l1557:	
   772                           
   773                           ;newmain.c: 49:     configCanal(12);
   774  0204  300C               	movlw	12
   775  0205  120A  118A  201C  120A  118A  	fcall	_configCanal
   776  020A                     l1559:	
   777                           
   778                           ;newmain.c: 50:     initLCD();
   779  020A  120A  118A  238F  120A  118A  	fcall	_initLCD
   780  020F                     l1561:	
   781                           
   782                           ;newmain.c: 51:     clcLCD();
   783  020F  120A  118A  24AD  120A  118A  	fcall	_clcLCD
   784  0214                     l1563:	
   785                           
   786                           ;newmain.c: 52:     setCursorLCD(1, 1);
   787  0214  01F5               	clrf	setCursorLCD@x
   788  0215  0AF5               	incf	setCursorLCD@x,f
   789  0216  3001               	movlw	1
   790  0217  120A  118A  2445  120A  118A  	fcall	_setCursorLCD
   791  021C                     l1565:	
   792                           
   793                           ;newmain.c: 54:     writeStrLCD("S1");
   794  021C  300F               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   795  021D  00F4               	movwf	writeStrLCD@string
   796  021E  3080               	movlw	128
   797  021F  00F5               	movwf	writeStrLCD@string+1
   798  0220  120A  118A  22C9  120A  118A  	fcall	_writeStrLCD
   799  0225                     l1567:	
   800                           
   801                           ;newmain.c: 55:     setCursorLCD(1, 7);
   802  0225  3007               	movlw	7
   803  0226  1283               	bcf	3,5	;RP0=0, select bank0
   804  0227  1303               	bcf	3,6	;RP1=0, select bank0
   805  0228  00BB               	movwf	??_main
   806  0229  083B               	movf	??_main,w
   807  022A  00F5               	movwf	setCursorLCD@x
   808  022B  3001               	movlw	1
   809  022C  120A  118A  2445  120A  118A  	fcall	_setCursorLCD
   810  0231                     l1569:	
   811                           
   812                           ;newmain.c: 56:     writeStrLCD("S2");
   813  0231  3012               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   814  0232  00F4               	movwf	writeStrLCD@string
   815  0233  3080               	movlw	128
   816  0234  00F5               	movwf	writeStrLCD@string+1
   817  0235  120A  118A  22C9  120A  118A  	fcall	_writeStrLCD
   818  023A                     l1571:	
   819                           
   820                           ;newmain.c: 57:     setCursorLCD(1, 13);
   821  023A  300D               	movlw	13
   822  023B  1283               	bcf	3,5	;RP0=0, select bank0
   823  023C  1303               	bcf	3,6	;RP1=0, select bank0
   824  023D  00BB               	movwf	??_main
   825  023E  083B               	movf	??_main,w
   826  023F  00F5               	movwf	setCursorLCD@x
   827  0240  3001               	movlw	1
   828  0241  120A  118A  2445  120A  118A  	fcall	_setCursorLCD
   829  0246                     l1573:	
   830                           
   831                           ;newmain.c: 58:     writeStrLCD("COM");
   832  0246  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   833  0247  00F4               	movwf	writeStrLCD@string
   834  0248  3080               	movlw	128
   835  0249  00F5               	movwf	writeStrLCD@string+1
   836  024A  120A  118A  22C9  120A  118A  	fcall	_writeStrLCD
   837  024F                     l1575:	
   838                           
   839                           ;newmain.c: 59:     setCursorLCD(2, 1);
   840  024F  01F5               	clrf	setCursorLCD@x
   841  0250  0AF5               	incf	setCursorLCD@x,f
   842  0251  3002               	movlw	2
   843  0252  120A  118A  2445  120A  118A  	fcall	_setCursorLCD
   844  0257                     l1577:	
   845                           
   846                           ;newmain.c: 63:         if(adc){
   847  0257  1283               	bcf	3,5	;RP0=0, select bank0
   848  0258  1303               	bcf	3,6	;RP1=0, select bank0
   849  0259  0840               	movf	_adc,w
   850  025A  1903               	btfsc	3,2
   851  025B  2A5D               	goto	u731
   852  025C  2A5E               	goto	u730
   853  025D                     u731:	
   854  025D  2A88               	goto	l1593
   855  025E                     u730:	
   856  025E                     l1579:	
   857                           
   858                           ;newmain.c: 64:             contADC++;
   859  025E  3001               	movlw	1
   860  025F  00BB               	movwf	??_main
   861  0260  083B               	movf	??_main,w
   862  0261  07BF               	addwf	_contADC,f
   863  0262                     l1581:	
   864                           
   865                           ;newmain.c: 65:             if(contADC%2){
   866  0262  1C3F               	btfss	_contADC,0
   867  0263  2A65               	goto	u741
   868  0264  2A66               	goto	u740
   869  0265                     u741:	
   870  0265  2A77               	goto	l1587
   871  0266                     u740:	
   872  0266                     l1583:	
   873                           
   874                           ;newmain.c: 66:                 selCanal(10);
   875  0266  300A               	movlw	10
   876  0267  120A  118A  24A0  120A  118A  	fcall	_selCanal
   877  026C                     l1585:	
   878                           
   879                           ;newmain.c: 67:                 sensor1 = readADC();
   880  026C  120A  118A  24B4  120A  118A  	fcall	_readADC
   881  0271  1283               	bcf	3,5	;RP0=0, select bank0
   882  0272  1303               	bcf	3,6	;RP1=0, select bank0
   883  0273  00BB               	movwf	??_main
   884  0274  083B               	movf	??_main,w
   885  0275  00BE               	movwf	_sensor1
   886                           
   887                           ;newmain.c: 68:             }else{
   888  0276  2A87               	goto	l1591
   889  0277                     l1587:	
   890                           
   891                           ;newmain.c: 69:                 selCanal(12);
   892  0277  300C               	movlw	12
   893  0278  120A  118A  24A0  120A  118A  	fcall	_selCanal
   894  027D                     l1589:	
   895                           
   896                           ;newmain.c: 71:                 sensor2 = readADC();
   897  027D  120A  118A  24B4  120A  118A  	fcall	_readADC
   898  0282  1283               	bcf	3,5	;RP0=0, select bank0
   899  0283  1303               	bcf	3,6	;RP1=0, select bank0
   900  0284  00BB               	movwf	??_main
   901  0285  083B               	movf	??_main,w
   902  0286  00BD               	movwf	_sensor2
   903  0287                     l1591:	
   904                           
   905                           ;newmain.c: 73:             adc = 0;
   906  0287  01C0               	clrf	_adc
   907  0288                     l1593:	
   908                           
   909                           ;newmain.c: 80:         setCursorLCD(2, 1);
   910  0288  01F5               	clrf	setCursorLCD@x
   911  0289  0AF5               	incf	setCursorLCD@x,f
   912  028A  3002               	movlw	2
   913  028B  120A  118A  2445  120A  118A  	fcall	_setCursorLCD
   914  0290                     l1595:	
   915                           
   916                           ;newmain.c: 81:         writeIntLCD(sensor1);
   917  0290  1283               	bcf	3,5	;RP0=0, select bank0
   918  0291  1303               	bcf	3,6	;RP1=0, select bank0
   919  0292  083E               	movf	_sensor1,w
   920  0293  120A  118A  2427  120A  118A  	fcall	_writeIntLCD
   921  0298                     l1597:	
   922                           
   923                           ;newmain.c: 82:         setCursorLCD(2, 7);
   924  0298  3007               	movlw	7
   925  0299  1283               	bcf	3,5	;RP0=0, select bank0
   926  029A  1303               	bcf	3,6	;RP1=0, select bank0
   927  029B  00BB               	movwf	??_main
   928  029C  083B               	movf	??_main,w
   929  029D  00F5               	movwf	setCursorLCD@x
   930  029E  3002               	movlw	2
   931  029F  120A  118A  2445  120A  118A  	fcall	_setCursorLCD
   932  02A4                     l1599:	
   933                           
   934                           ;newmain.c: 83:         writeIntLCD(sensor2);
   935  02A4  1283               	bcf	3,5	;RP0=0, select bank0
   936  02A5  1303               	bcf	3,6	;RP1=0, select bank0
   937  02A6  083D               	movf	_sensor2,w
   938  02A7  120A  118A  2427  120A  118A  	fcall	_writeIntLCD
   939  02AC                     l1601:	
   940                           
   941                           ;newmain.c: 84:         setCursorLCD(2, 13);
   942  02AC  300D               	movlw	13
   943  02AD  1283               	bcf	3,5	;RP0=0, select bank0
   944  02AE  1303               	bcf	3,6	;RP1=0, select bank0
   945  02AF  00BB               	movwf	??_main
   946  02B0  083B               	movf	??_main,w
   947  02B1  00F5               	movwf	setCursorLCD@x
   948  02B2  3002               	movlw	2
   949  02B3  120A  118A  2445  120A  118A  	fcall	_setCursorLCD
   950  02B8                     l1603:	
   951                           
   952                           ;newmain.c: 85:         writeIntLCD(cont);
   953  02B8  3000               	movlw	0
   954  02B9  120A  118A  2427  120A  118A  	fcall	_writeIntLCD
   955  02BE                     l1605:	
   956                           
   957                           ;newmain.c: 87:         if(ADCON0bits.GO_DONE == 0){
   958  02BE  1283               	bcf	3,5	;RP0=0, select bank0
   959  02BF  1303               	bcf	3,6	;RP1=0, select bank0
   960  02C0  189F               	btfsc	31,1	;volatile
   961  02C1  2AC3               	goto	u751
   962  02C2  2AC4               	goto	u750
   963  02C3                     u751:	
   964  02C3  2A57               	goto	l1577
   965  02C4                     u750:	
   966  02C4                     l1607:	
   967                           
   968                           ;newmain.c: 88:             ADCON0bits.GO_DONE = 1;
   969  02C4  149F               	bsf	31,1	;volatile
   970  02C5  2A57               	goto	l1577
   971  02C6  120A  118A  280C   	ljmp	start
   972  02C9                     __end_of_main:	
   973                           
   974                           	psect	text1
   975  0427                     __ptext1:	
   976 ;; *************** function _writeIntLCD *****************
   977 ;; Defined at:
   978 ;;		line 59 in file "LCD.c"
   979 ;; Parameters:    Size  Location     Type
   980 ;;  numero          1    wreg     unsigned char 
   981 ;; Auto vars:     Size  Location     Type
   982 ;;  numero          1   26[BANK0 ] unsigned char 
   983 ;;  buffer          4   22[BANK0 ] unsigned char [4]
   984 ;; Return value:  Size  Location     Type
   985 ;;                  1    wreg      void 
   986 ;; Registers used:
   987 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   988 ;; Tracked objects:
   989 ;;		On entry : 0/0
   990 ;;		On exit  : 0/0
   991 ;;		Unchanged: 0/0
   992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   993 ;;      Params:         0       0       0       0       0
   994 ;;      Locals:         0       5       0       0       0
   995 ;;      Temps:          0       3       0       0       0
   996 ;;      Totals:         0       8       0       0       0
   997 ;;Total ram usage:        8 bytes
   998 ;; Hardware stack levels used:    1
   999 ;; Hardware stack levels required when called:    3
  1000 ;; This function calls:
  1001 ;;		_sprintf
  1002 ;;		_writeStrLCD
  1003 ;; This function is called by:
  1004 ;;		_main
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           
  1009                           ;psect for function _writeIntLCD
  1010  0427                     _writeIntLCD:	
  1011                           
  1012                           ;incstack = 0
  1013                           ; Regs used in _writeIntLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1014                           ;writeIntLCD@numero stored from wreg
  1015  0427  1283               	bcf	3,5	;RP0=0, select bank0
  1016  0428  1303               	bcf	3,6	;RP1=0, select bank0
  1017  0429  00BA               	movwf	writeIntLCD@numero
  1018  042A                     l1549:	
  1019                           
  1020                           ;LCD.c: 60:     char buffer [4];;LCD.c: 61:     sprintf (buffer, "%d", numero);
  1021  042A  3015               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1022  042B  00B3               	movwf	??_writeIntLCD
  1023  042C  0833               	movf	??_writeIntLCD,w
  1024  042D  00A6               	movwf	sprintf@f
  1025  042E  083A               	movf	writeIntLCD@numero,w
  1026  042F  00B4               	movwf	??_writeIntLCD+1
  1027  0430  01B5               	clrf	??_writeIntLCD+2
  1028  0431  0834               	movf	??_writeIntLCD+1,w
  1029  0432  00A7               	movwf	?_sprintf+1
  1030  0433  0835               	movf	??_writeIntLCD+2,w
  1031  0434  00A8               	movwf	?_sprintf+2
  1032  0435  3036               	movlw	(low (writeIntLCD@buffer| 0))& (0+255)
  1033  0436  120A  118A  2109  120A  118A  	fcall	_sprintf
  1034                           
  1035                           ;LCD.c: 62:     writeStrLCD(buffer);
  1036  043B  3036               	movlw	(low (writeIntLCD@buffer| 0))& (0+255)
  1037  043C  00F4               	movwf	writeStrLCD@string
  1038  043D  3000               	movlw	0
  1039  043E  00F5               	movwf	writeStrLCD@string+1
  1040  043F  120A  118A  22C9  120A  118A  	fcall	_writeStrLCD
  1041  0444                     l102:	
  1042  0444  0008               	return
  1043  0445                     __end_of_writeIntLCD:	
  1044                           
  1045                           	psect	text2
  1046  02C9                     __ptext2:	
  1047 ;; *************** function _writeStrLCD *****************
  1048 ;; Defined at:
  1049 ;;		line 21 in file "LCD.c"
  1050 ;; Parameters:    Size  Location     Type
  1051 ;;  string          2    4[COMMON] PTR unsigned char 
  1052 ;;		 -> STR_4(4), STR_3(3), STR_2(3), writeIntLCD@buffer(4), 
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;  cont            2    0[BANK0 ] int 
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  1    wreg      void 
  1057 ;; Registers used:
  1058 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1064 ;;      Params:         2       0       0       0       0
  1065 ;;      Locals:         0       2       0       0       0
  1066 ;;      Temps:          3       0       0       0       0
  1067 ;;      Totals:         5       2       0       0       0
  1068 ;;Total ram usage:        7 bytes
  1069 ;; Hardware stack levels used:    1
  1070 ;; Hardware stack levels required when called:    2
  1071 ;; This function calls:
  1072 ;;		_writeCharLCD
  1073 ;; This function is called by:
  1074 ;;		_writeIntLCD
  1075 ;;		_main
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           
  1080                           ;psect for function _writeStrLCD
  1081  02C9                     _writeStrLCD:	
  1082  02C9                     l1479:	
  1083                           ;incstack = 0
  1084                           ; Regs used in _writeStrLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1085                           
  1086                           
  1087                           ;LCD.c: 22:  int cont;;LCD.c: 23:  for(cont=0;string[cont]!='\0';cont++){
  1088  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  1089  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  1090  02CB  01A0               	clrf	writeStrLCD@cont
  1091  02CC  01A1               	clrf	writeStrLCD@cont+1
  1092  02CD  2AF2               	goto	l1485
  1093  02CE                     l1481:	
  1094                           
  1095                           ;LCD.c: 24:         writeCharLCD(string[cont]);
  1096  02CE  0820               	movf	writeStrLCD@cont,w
  1097  02CF  0774               	addwf	writeStrLCD@string,w
  1098  02D0  00F7               	movwf	??_writeStrLCD+1
  1099  02D1  0875               	movf	writeStrLCD@string+1,w
  1100  02D2  00F6               	movwf	??_writeStrLCD
  1101  02D3  1803               	skipnc
  1102  02D4  0AF6               	incf	??_writeStrLCD,f
  1103  02D5  1FA0               	btfss	writeStrLCD@cont,7
  1104  02D6  2AD8               	goto	u630
  1105  02D7  03F6               	decf	??_writeStrLCD,f
  1106  02D8                     u630:	
  1107  02D8  0876               	movf	??_writeStrLCD,w
  1108  02D9  00F8               	movwf	??_writeStrLCD+2
  1109  02DA  0878               	movf	??_writeStrLCD+2,w
  1110  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  1111  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  1112  02DD  00FF               	movwf	btemp+1
  1113  02DE  0877               	movf	??_writeStrLCD+1,w
  1114  02DF  0084               	movwf	4
  1115  02E0  120A  118A  2400  120A  118A  	fcall	stringtab
  1116  02E5  120A  118A  2491  120A  118A  	fcall	_writeCharLCD
  1117  02EA                     l1483:	
  1118                           
  1119                           ;LCD.c: 25:     }
  1120  02EA  3001               	movlw	1
  1121  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  1122  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  1123  02ED  07A0               	addwf	writeStrLCD@cont,f
  1124  02EE  1803               	skipnc
  1125  02EF  0AA1               	incf	writeStrLCD@cont+1,f
  1126  02F0  3000               	movlw	0
  1127  02F1  07A1               	addwf	writeStrLCD@cont+1,f
  1128  02F2                     l1485:	
  1129  02F2  0820               	movf	writeStrLCD@cont,w
  1130  02F3  0774               	addwf	writeStrLCD@string,w
  1131  02F4  00F7               	movwf	??_writeStrLCD+1
  1132  02F5  0875               	movf	writeStrLCD@string+1,w
  1133  02F6  00F6               	movwf	??_writeStrLCD
  1134  02F7  1803               	skipnc
  1135  02F8  0AF6               	incf	??_writeStrLCD,f
  1136  02F9  1FA0               	btfss	writeStrLCD@cont,7
  1137  02FA  2AFC               	goto	u640
  1138  02FB  03F6               	decf	??_writeStrLCD,f
  1139  02FC                     u640:	
  1140  02FC  0876               	movf	??_writeStrLCD,w
  1141  02FD  00F8               	movwf	??_writeStrLCD+2
  1142  02FE  0878               	movf	??_writeStrLCD+2,w
  1143  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  1144  0300  1303               	bcf	3,6	;RP1=0, select bank0
  1145  0301  00FF               	movwf	btemp+1
  1146  0302  0877               	movf	??_writeStrLCD+1,w
  1147  0303  0084               	movwf	4
  1148  0304  120A  118A  2400  120A  118A  	fcall	stringtab
  1149  0309  3A00               	xorlw	0
  1150  030A  1D03               	skipz
  1151  030B  2B0D               	goto	u651
  1152  030C  2B0E               	goto	u650
  1153  030D                     u651:	
  1154  030D  2ACE               	goto	l1481
  1155  030E                     u650:	
  1156  030E                     l90:	
  1157  030E  0008               	return
  1158  030F                     __end_of_writeStrLCD:	
  1159                           
  1160                           	psect	text3
  1161  0491                     __ptext3:	
  1162 ;; *************** function _writeCharLCD *****************
  1163 ;; Defined at:
  1164 ;;		line 28 in file "LCD.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;  character       1    wreg     unsigned char 
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;  character       1    3[COMMON] unsigned char 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      void 
  1171 ;; Registers used:
  1172 ;;		wreg
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1178 ;;      Params:         0       0       0       0       0
  1179 ;;      Locals:         1       0       0       0       0
  1180 ;;      Temps:          1       0       0       0       0
  1181 ;;      Totals:         2       0       0       0       0
  1182 ;;Total ram usage:        2 bytes
  1183 ;; Hardware stack levels used:    1
  1184 ;; Hardware stack levels required when called:    1
  1185 ;; This function calls:
  1186 ;;		Nothing
  1187 ;; This function is called by:
  1188 ;;		_writeStrLCD
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192                           
  1193                           ;psect for function _writeCharLCD
  1194  0491                     _writeCharLCD:	
  1195                           
  1196                           ;incstack = 0
  1197                           ; Regs used in _writeCharLCD: [wreg]
  1198                           ;writeCharLCD@character stored from wreg
  1199  0491  00F3               	movwf	writeCharLCD@character
  1200  0492                     l1449:	
  1201                           
  1202                           ;LCD.c: 29:    RC0 = 1;
  1203  0492  1283               	bcf	3,5	;RP0=0, select bank0
  1204  0493  1303               	bcf	3,6	;RP1=0, select bank0
  1205  0494  1407               	bsf	7,0	;volatile
  1206  0495                     l1451:	
  1207                           
  1208                           ;LCD.c: 30:    PORTA = character;
  1209  0495  0873               	movf	writeCharLCD@character,w
  1210  0496  0085               	movwf	5	;volatile
  1211  0497                     l1453:	
  1212                           
  1213                           ;LCD.c: 31:    RC1 = 1;
  1214  0497  1487               	bsf	7,1	;volatile
  1215                           
  1216                           ;LCD.c: 32:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  1217  0498  300D               	movlw	13
  1218  0499  00F2               	movwf	??_writeCharLCD
  1219  049A                     u767:	
  1220  049A  0BF2               	decfsz	??_writeCharLCD,f
  1221  049B  2C9A               	goto	u767
  1222  049C                     l1455:	
  1223                           
  1224                           ;LCD.c: 33:    RC1 = 0;
  1225  049C  1283               	bcf	3,5	;RP0=0, select bank0
  1226  049D  1303               	bcf	3,6	;RP1=0, select bank0
  1227  049E  1087               	bcf	7,1	;volatile
  1228  049F                     l93:	
  1229  049F  0008               	return
  1230  04A0                     __end_of_writeCharLCD:	
  1231                           
  1232                           	psect	text4
  1233  0109                     __ptext4:	
  1234 ;; *************** function _sprintf *****************
  1235 ;; Defined at:
  1236 ;;		line 505 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;  sp              1    wreg     PTR unsigned char 
  1239 ;;		 -> writeIntLCD@buffer(4), 
  1240 ;;  f               1    6[BANK0 ] PTR const unsigned char 
  1241 ;;		 -> STR_1(3), 
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;  sp              1   17[BANK0 ] PTR unsigned char 
  1244 ;;		 -> writeIntLCD@buffer(4), 
  1245 ;;  tmpval          4    0        struct .
  1246 ;;  val             2   15[BANK0 ] unsigned int 
  1247 ;;  cp              2    0        PTR const unsigned char 
  1248 ;;  len             2    0        unsigned int 
  1249 ;;  c               1   18[BANK0 ] unsigned char 
  1250 ;;  prec            1   14[BANK0 ] char 
  1251 ;;  flag            1   13[BANK0 ] unsigned char 
  1252 ;;  ap              1   12[BANK0 ] PTR void [1]
  1253 ;;		 -> ?_sprintf(2), 
  1254 ;; Return value:  Size  Location     Type
  1255 ;;                  2    6[BANK0 ] int 
  1256 ;; Registers used:
  1257 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1258 ;; Tracked objects:
  1259 ;;		On entry : 0/0
  1260 ;;		On exit  : 0/0
  1261 ;;		Unchanged: 0/0
  1262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1263 ;;      Params:         0       3       0       0       0
  1264 ;;      Locals:         0       7       0       0       0
  1265 ;;      Temps:          0       3       0       0       0
  1266 ;;      Totals:         0      13       0       0       0
  1267 ;;Total ram usage:       13 bytes
  1268 ;; Hardware stack levels used:    1
  1269 ;; Hardware stack levels required when called:    2
  1270 ;; This function calls:
  1271 ;;		___lwdiv
  1272 ;;		___lwmod
  1273 ;; This function is called by:
  1274 ;;		_writeIntLCD
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           
  1279                           ;psect for function _sprintf
  1280  0109                     _sprintf:	
  1281                           
  1282                           ;incstack = 0
  1283                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1284                           ;sprintf@sp stored from wreg
  1285  0109  1283               	bcf	3,5	;RP0=0, select bank0
  1286  010A  1303               	bcf	3,6	;RP1=0, select bank0
  1287  010B  00B1               	movwf	sprintf@sp
  1288  010C                     l1487:	
  1289                           
  1290                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 505: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources
      +                          \c90\common\doprnt.c: 506: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\
      +                          common\doprnt.c: 507:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\source
      +                          s\c90\common\doprnt.c: 512:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sour
      +                          ces\c90\common\doprnt.c: 521:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .10\pic\sources\c90\common\doprnt.c: 525:  unsigned char flag;
  1291  010C  3027               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1292  010D  00A9               	movwf	??_sprintf
  1293  010E  0829               	movf	??_sprintf,w
  1294  010F  00AC               	movwf	sprintf@ap
  1295                           
  1296                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 553:  while
      +                          ((c = *f++)) {
  1297  0110  29DC               	goto	l1539
  1298  0111                     l1489:	
  1299                           
  1300                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 555:   if(c
      +                           != '%')
  1301  0111  3025               	movlw	37
  1302  0112  0632               	xorwf	sprintf@c,w
  1303  0113  1903               	btfsc	3,2
  1304  0114  2916               	goto	u661
  1305  0115  2917               	goto	u660
  1306  0116                     u661:	
  1307  0116  2923               	goto	l1495
  1308  0117                     u660:	
  1309  0117                     l1491:	
  1310                           
  1311                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 557:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 558:    ((*sp+
      +                          + = (c)));
  1312  0117  0832               	movf	sprintf@c,w
  1313  0118  00A9               	movwf	??_sprintf
  1314  0119  0831               	movf	sprintf@sp,w
  1315  011A  0084               	movwf	4
  1316  011B  0829               	movf	??_sprintf,w
  1317  011C  1383               	bcf	3,7	;select IRP bank0
  1318  011D  0080               	movwf	0
  1319  011E                     l1493:	
  1320  011E  3001               	movlw	1
  1321  011F  00A9               	movwf	??_sprintf
  1322  0120  0829               	movf	??_sprintf,w
  1323  0121  07B1               	addwf	sprintf@sp,f
  1324                           
  1325                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 559:    con
      +                          tinue;
  1326  0122  29DC               	goto	l1539
  1327  0123                     l1495:	
  1328                           
  1329                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 565:   flag
      +                           = 0;
  1330  0123  01AD               	clrf	sprintf@flag
  1331  0124                     l1499:	
  1332                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 661:   swit
      +                          ch(c = *f++) {
  1333                           
  1334  0124  3001               	movlw	1
  1335  0125  07A6               	addwf	sprintf@f,f
  1336  0126  30FF               	movlw	-1
  1337  0127  0726               	addwf	sprintf@f,w
  1338  0128  0084               	movwf	4
  1339  0129  120A  118A  240A  120A  118A  	fcall	stringdir
  1340  012E  00B2               	movwf	sprintf@c
  1341  012F  00A9               	movwf	??_sprintf
  1342  0130  01AA               	clrf	??_sprintf+1
  1343                           
  1344                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1345                           ; Switch size 1, requested type "simple"
  1346                           ; Number of cases is 1, Range of values is 0 to 0
  1347                           ; switch strategies available:
  1348                           ; Name         Instructions Cycles
  1349                           ; simple_byte            4     3 (average)
  1350                           ; direct_byte           11     8 (fixed)
  1351                           ; jumptable            260     6 (fixed)
  1352                           ;	Chosen strategy is simple_byte
  1353  0131  082A               	movf	??_sprintf+1,w
  1354  0132  3A00               	xorlw	0	; case 0
  1355  0133  1903               	skipnz
  1356  0134  2936               	goto	l1669
  1357  0135  29DC               	goto	l1539
  1358  0136                     l1669:	
  1359                           
  1360                           ; Switch size 1, requested type "simple"
  1361                           ; Number of cases is 3, Range of values is 0 to 105
  1362                           ; switch strategies available:
  1363                           ; Name         Instructions Cycles
  1364                           ; simple_byte           10     6 (average)
  1365                           ; jumptable            260     6 (fixed)
  1366                           ;	Chosen strategy is simple_byte
  1367  0136  0829               	movf	??_sprintf,w
  1368  0137  3A00               	xorlw	0	; case 0
  1369  0138  1903               	skipnz
  1370  0139  29EE               	goto	l1541
  1371  013A  3A64               	xorlw	100	; case 100
  1372  013B  1903               	skipnz
  1373  013C  2941               	goto	l1501
  1374  013D  3A0D               	xorlw	13	; case 105
  1375  013E  1903               	skipnz
  1376  013F  2941               	goto	l1501
  1377  0140  29DC               	goto	l1539
  1378  0141                     l1501:	
  1379                           
  1380                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1279:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1285:     val
      +                           = (unsigned int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1381  0141  082C               	movf	sprintf@ap,w
  1382  0142  0084               	movwf	4
  1383  0143  1383               	bcf	3,7	;select IRP bank0
  1384  0144  0800               	movf	0,w
  1385  0145  00AF               	movwf	sprintf@val
  1386  0146  0A84               	incf	4,f
  1387  0147  0800               	movf	0,w
  1388  0148  00B0               	movwf	sprintf@val+1
  1389  0149                     l1503:	
  1390  0149  3002               	movlw	2
  1391  014A  00A9               	movwf	??_sprintf
  1392  014B  0829               	movf	??_sprintf,w
  1393  014C  07AC               	addwf	sprintf@ap,f
  1394  014D                     l1505:	
  1395                           
  1396                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1287:    if
      +                          ((int)val < 0) {
  1397  014D  1FB0               	btfss	sprintf@val+1,7
  1398  014E  2950               	goto	u671
  1399  014F  2951               	goto	u670
  1400  0150                     u671:	
  1401  0150  295A               	goto	l1511
  1402  0151                     u670:	
  1403  0151                     l1507:	
  1404                           
  1405                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1288:     f
      +                          lag |= 0x03;
  1406  0151  3003               	movlw	3
  1407  0152  00A9               	movwf	??_sprintf
  1408  0153  0829               	movf	??_sprintf,w
  1409  0154  04AD               	iorwf	sprintf@flag,f
  1410  0155                     l1509:	
  1411                           
  1412                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1289:     v
      +                          al = -val;
  1413  0155  09AF               	comf	sprintf@val,f
  1414  0156  09B0               	comf	sprintf@val+1,f
  1415  0157  0AAF               	incf	sprintf@val,f
  1416  0158  1903               	skipnz
  1417  0159  0AB0               	incf	sprintf@val+1,f
  1418  015A                     l1511:	
  1419                           
  1420                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1292:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1331:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1421  015A  01B2               	clrf	sprintf@c
  1422  015B  0AB2               	incf	sprintf@c,f
  1423  015C                     l1517:	
  1424                           
  1425                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1332:     i
      +                          f(val < dpowers[c])
  1426  015C  0832               	movf	sprintf@c,w
  1427  015D  00A9               	movwf	??_sprintf
  1428  015E  0729               	addwf	??_sprintf,w
  1429  015F  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1430  0160  0084               	movwf	4
  1431  0161  120A  118A  240A  120A  118A  	fcall	stringdir
  1432  0166  00AA               	movwf	??_sprintf+1
  1433  0167  120A  118A  240A  120A  118A  	fcall	stringdir
  1434  016C  00AB               	movwf	??_sprintf+2
  1435  016D  082B               	movf	??_sprintf+2,w
  1436  016E  0230               	subwf	sprintf@val+1,w
  1437  016F  1D03               	skipz
  1438  0170  2973               	goto	u685
  1439  0171  082A               	movf	??_sprintf+1,w
  1440  0172  022F               	subwf	sprintf@val,w
  1441  0173                     u685:	
  1442  0173  1803               	skipnc
  1443  0174  2976               	goto	u681
  1444  0175  2977               	goto	u680
  1445  0176                     u681:	
  1446  0176  2978               	goto	l1521
  1447  0177                     u680:	
  1448  0177  2982               	goto	l1523
  1449  0178                     l1521:	
  1450  0178  3001               	movlw	1
  1451  0179  00A9               	movwf	??_sprintf
  1452  017A  0829               	movf	??_sprintf,w
  1453  017B  07B2               	addwf	sprintf@c,f
  1454  017C  3005               	movlw	5
  1455  017D  0632               	xorwf	sprintf@c,w
  1456  017E  1D03               	btfss	3,2
  1457  017F  2981               	goto	u691
  1458  0180  2982               	goto	u690
  1459  0181                     u691:	
  1460  0181  295C               	goto	l1517
  1461  0182                     u690:	
  1462  0182                     l1523:	
  1463                           
  1464                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1448:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1464:    if(f
      +                          lag & 0x03)
  1465  0182  082D               	movf	sprintf@flag,w
  1466  0183  3903               	andlw	3
  1467  0184  1903               	btfsc	3,2
  1468  0185  2987               	goto	u701
  1469  0186  2988               	goto	u700
  1470  0187                     u701:	
  1471  0187  2993               	goto	l1529
  1472  0188                     u700:	
  1473  0188                     l1525:	
  1474                           
  1475                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1465:     (
      +                          (*sp++ = ('-')));
  1476  0188  302D               	movlw	45
  1477  0189  00A9               	movwf	??_sprintf
  1478  018A  0831               	movf	sprintf@sp,w
  1479  018B  0084               	movwf	4
  1480  018C  0829               	movf	??_sprintf,w
  1481  018D  1383               	bcf	3,7	;select IRP bank0
  1482  018E  0080               	movwf	0
  1483  018F                     l1527:	
  1484  018F  3001               	movlw	1
  1485  0190  00A9               	movwf	??_sprintf
  1486  0191  0829               	movf	??_sprintf,w
  1487  0192  07B1               	addwf	sprintf@sp,f
  1488  0193                     l1529:	
  1489                           
  1490                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1495:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1498:   prec 
      +                          = c;
  1491  0193  0832               	movf	sprintf@c,w
  1492  0194  00A9               	movwf	??_sprintf
  1493  0195  0829               	movf	??_sprintf,w
  1494  0196  00AE               	movwf	sprintf@prec
  1495                           
  1496                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1500:   whi
      +                          le(prec--) {
  1497  0197  29D3               	goto	l1537
  1498  0198                     l1531:	
  1499                           
  1500                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1504:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1515:     c 
      +                          = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  1501  0198  300A               	movlw	10
  1502  0199  00A0               	movwf	___lwmod@divisor
  1503  019A  3000               	movlw	0
  1504  019B  00A1               	movwf	___lwmod@divisor+1
  1505  019C  082E               	movf	sprintf@prec,w
  1506  019D  00A9               	movwf	??_sprintf
  1507  019E  0729               	addwf	??_sprintf,w
  1508  019F  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1509  01A0  0084               	movwf	4
  1510  01A1  120A  118A  240A  120A  118A  	fcall	stringdir
  1511  01A6  00F2               	movwf	___lwdiv@divisor
  1512  01A7  120A  118A  240A  120A  118A  	fcall	stringdir
  1513  01AC  00F3               	movwf	___lwdiv@divisor+1
  1514  01AD  0830               	movf	sprintf@val+1,w
  1515  01AE  00F5               	movwf	___lwdiv@dividend+1
  1516  01AF  082F               	movf	sprintf@val,w
  1517  01B0  00F4               	movwf	___lwdiv@dividend
  1518  01B1  120A  118A  230F  120A  118A  	fcall	___lwdiv
  1519  01B6  0873               	movf	?___lwdiv+1,w
  1520  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  1521  01B8  1303               	bcf	3,6	;RP1=0, select bank0
  1522  01B9  00A3               	movwf	___lwmod@dividend+1
  1523  01BA  0872               	movf	?___lwdiv,w
  1524  01BB  00A2               	movwf	___lwmod@dividend
  1525  01BC  120A  118A  2353  120A  118A  	fcall	___lwmod
  1526  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  1527  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  1528  01C3  0820               	movf	?___lwmod,w
  1529  01C4  3E30               	addlw	48
  1530  01C5  00AA               	movwf	??_sprintf+1
  1531  01C6  082A               	movf	??_sprintf+1,w
  1532  01C7  00B2               	movwf	sprintf@c
  1533  01C8                     l1533:	
  1534                           
  1535                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1549:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1550:    ((*
      +                          sp++ = (c)));
  1536  01C8  0832               	movf	sprintf@c,w
  1537  01C9  00A9               	movwf	??_sprintf
  1538  01CA  0831               	movf	sprintf@sp,w
  1539  01CB  0084               	movwf	4
  1540  01CC  0829               	movf	??_sprintf,w
  1541  01CD  1383               	bcf	3,7	;select IRP bank0
  1542  01CE  0080               	movwf	0
  1543  01CF                     l1535:	
  1544  01CF  3001               	movlw	1
  1545  01D0  00A9               	movwf	??_sprintf
  1546  01D1  0829               	movf	??_sprintf,w
  1547  01D2  07B1               	addwf	sprintf@sp,f
  1548  01D3                     l1537:	
  1549                           
  1550                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1500:   whi
      +                          le(prec--) {
  1551  01D3  30FF               	movlw	255
  1552  01D4  00A9               	movwf	??_sprintf
  1553  01D5  0829               	movf	??_sprintf,w
  1554  01D6  07AE               	addwf	sprintf@prec,f
  1555  01D7  0A2E               	incf	sprintf@prec,w
  1556  01D8  1D03               	btfss	3,2
  1557  01D9  29DB               	goto	u711
  1558  01DA  29DC               	goto	u710
  1559  01DB                     u711:	
  1560  01DB  2998               	goto	l1531
  1561  01DC                     u710:	
  1562  01DC                     l1539:	
  1563                           
  1564                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 553:  while
      +                          ((c = *f++)) {
  1565  01DC  3001               	movlw	1
  1566  01DD  07A6               	addwf	sprintf@f,f
  1567  01DE  30FF               	movlw	-1
  1568  01DF  0726               	addwf	sprintf@f,w
  1569  01E0  0084               	movwf	4
  1570  01E1  120A  118A  240A  120A  118A  	fcall	stringdir
  1571  01E6  00A9               	movwf	??_sprintf
  1572  01E7  0829               	movf	??_sprintf,w
  1573  01E8  00B2               	movwf	sprintf@c
  1574  01E9  0832               	movf	sprintf@c,w
  1575  01EA  1D03               	btfss	3,2
  1576  01EB  29ED               	goto	u721
  1577  01EC  29EE               	goto	u720
  1578  01ED                     u721:	
  1579  01ED  2911               	goto	l1489
  1580  01EE                     u720:	
  1581  01EE                     l1541:	
  1582                           
  1583                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1564:  *sp 
      +                          = 0;
  1584  01EE  0831               	movf	sprintf@sp,w
  1585  01EF  0084               	movwf	4
  1586  01F0  1383               	bcf	3,7	;select IRP bank0
  1587  01F1  0180               	clrf	0
  1588  01F2                     l291:	
  1589  01F2  0008               	return
  1590  01F3                     __end_of_sprintf:	
  1591                           
  1592                           	psect	text5
  1593  0353                     __ptext5:	
  1594 ;; *************** function ___lwmod *****************
  1595 ;; Defined at:
  1596 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;  divisor         2    0[BANK0 ] unsigned int 
  1599 ;;  dividend        2    2[BANK0 ] unsigned int 
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;  counter         1    5[BANK0 ] unsigned char 
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  2    0[BANK0 ] unsigned int 
  1604 ;; Registers used:
  1605 ;;		wreg, status,2, status,0
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1611 ;;      Params:         0       4       0       0       0
  1612 ;;      Locals:         0       1       0       0       0
  1613 ;;      Temps:          0       1       0       0       0
  1614 ;;      Totals:         0       6       0       0       0
  1615 ;;Total ram usage:        6 bytes
  1616 ;; Hardware stack levels used:    1
  1617 ;; Hardware stack levels required when called:    1
  1618 ;; This function calls:
  1619 ;;		Nothing
  1620 ;; This function is called by:
  1621 ;;		_sprintf
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           
  1626                           ;psect for function ___lwmod
  1627  0353                     ___lwmod:	
  1628  0353                     l1457:	
  1629                           ;incstack = 0
  1630                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1631                           
  1632  0353  1283               	bcf	3,5	;RP0=0, select bank0
  1633  0354  1303               	bcf	3,6	;RP1=0, select bank0
  1634  0355  0820               	movf	___lwmod@divisor,w
  1635  0356  0421               	iorwf	___lwmod@divisor+1,w
  1636  0357  1903               	btfsc	3,2
  1637  0358  2B5A               	goto	u571
  1638  0359  2B5B               	goto	u570
  1639  035A                     u571:	
  1640  035A  2B8A               	goto	l1475
  1641  035B                     u570:	
  1642  035B                     l1459:	
  1643  035B  01A5               	clrf	___lwmod@counter
  1644  035C  0AA5               	incf	___lwmod@counter,f
  1645  035D  2B69               	goto	l1465
  1646  035E                     l1461:	
  1647  035E  3001               	movlw	1
  1648  035F                     u585:	
  1649  035F  1003               	clrc
  1650  0360  0DA0               	rlf	___lwmod@divisor,f
  1651  0361  0DA1               	rlf	___lwmod@divisor+1,f
  1652  0362  3EFF               	addlw	-1
  1653  0363  1D03               	skipz
  1654  0364  2B5F               	goto	u585
  1655  0365                     l1463:	
  1656  0365  3001               	movlw	1
  1657  0366  00A4               	movwf	??___lwmod
  1658  0367  0824               	movf	??___lwmod,w
  1659  0368  07A5               	addwf	___lwmod@counter,f
  1660  0369                     l1465:	
  1661  0369  1FA1               	btfss	___lwmod@divisor+1,7
  1662  036A  2B6C               	goto	u591
  1663  036B  2B6D               	goto	u590
  1664  036C                     u591:	
  1665  036C  2B5E               	goto	l1461
  1666  036D                     u590:	
  1667  036D                     l1467:	
  1668  036D  0821               	movf	___lwmod@divisor+1,w
  1669  036E  0223               	subwf	___lwmod@dividend+1,w
  1670  036F  1D03               	skipz
  1671  0370  2B73               	goto	u605
  1672  0371  0820               	movf	___lwmod@divisor,w
  1673  0372  0222               	subwf	___lwmod@dividend,w
  1674  0373                     u605:	
  1675  0373  1C03               	skipc
  1676  0374  2B76               	goto	u601
  1677  0375  2B77               	goto	u600
  1678  0376                     u601:	
  1679  0376  2B7D               	goto	l1471
  1680  0377                     u600:	
  1681  0377                     l1469:	
  1682  0377  0820               	movf	___lwmod@divisor,w
  1683  0378  02A2               	subwf	___lwmod@dividend,f
  1684  0379  0821               	movf	___lwmod@divisor+1,w
  1685  037A  1C03               	skipc
  1686  037B  03A3               	decf	___lwmod@dividend+1,f
  1687  037C  02A3               	subwf	___lwmod@dividend+1,f
  1688  037D                     l1471:	
  1689  037D  3001               	movlw	1
  1690  037E                     u615:	
  1691  037E  1003               	clrc
  1692  037F  0CA1               	rrf	___lwmod@divisor+1,f
  1693  0380  0CA0               	rrf	___lwmod@divisor,f
  1694  0381  3EFF               	addlw	-1
  1695  0382  1D03               	skipz
  1696  0383  2B7E               	goto	u615
  1697  0384                     l1473:	
  1698  0384  3001               	movlw	1
  1699  0385  02A5               	subwf	___lwmod@counter,f
  1700  0386  1D03               	btfss	3,2
  1701  0387  2B89               	goto	u621
  1702  0388  2B8A               	goto	u620
  1703  0389                     u621:	
  1704  0389  2B6D               	goto	l1467
  1705  038A                     u620:	
  1706  038A                     l1475:	
  1707  038A  0823               	movf	___lwmod@dividend+1,w
  1708  038B  00A1               	movwf	?___lwmod+1
  1709  038C  0822               	movf	___lwmod@dividend,w
  1710  038D  00A0               	movwf	?___lwmod
  1711  038E                     l577:	
  1712  038E  0008               	return
  1713  038F                     __end_of___lwmod:	
  1714                           
  1715                           	psect	text6
  1716  030F                     __ptext6:	
  1717 ;; *************** function ___lwdiv *****************
  1718 ;; Defined at:
  1719 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;  divisor         2    2[COMMON] unsigned int 
  1722 ;;  dividend        2    4[COMMON] unsigned int 
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;  quotient        2    7[COMMON] unsigned int 
  1725 ;;  counter         1    9[COMMON] unsigned char 
  1726 ;; Return value:  Size  Location     Type
  1727 ;;                  2    2[COMMON] unsigned int 
  1728 ;; Registers used:
  1729 ;;		wreg, status,2, status,0
  1730 ;; Tracked objects:
  1731 ;;		On entry : 0/0
  1732 ;;		On exit  : 0/0
  1733 ;;		Unchanged: 0/0
  1734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1735 ;;      Params:         4       0       0       0       0
  1736 ;;      Locals:         3       0       0       0       0
  1737 ;;      Temps:          1       0       0       0       0
  1738 ;;      Totals:         8       0       0       0       0
  1739 ;;Total ram usage:        8 bytes
  1740 ;; Hardware stack levels used:    1
  1741 ;; Hardware stack levels required when called:    1
  1742 ;; This function calls:
  1743 ;;		Nothing
  1744 ;; This function is called by:
  1745 ;;		_sprintf
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           
  1750                           ;psect for function ___lwdiv
  1751  030F                     ___lwdiv:	
  1752  030F                     l1133:	
  1753                           ;incstack = 0
  1754                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1755                           
  1756  030F  01F7               	clrf	___lwdiv@quotient
  1757  0310  01F8               	clrf	___lwdiv@quotient+1
  1758  0311                     l1135:	
  1759  0311  0872               	movf	___lwdiv@divisor,w
  1760  0312  0473               	iorwf	___lwdiv@divisor+1,w
  1761  0313  1903               	btfsc	3,2
  1762  0314  2B16               	goto	u291
  1763  0315  2B17               	goto	u290
  1764  0316                     u291:	
  1765  0316  2B4E               	goto	l1155
  1766  0317                     u290:	
  1767  0317                     l1137:	
  1768  0317  01F9               	clrf	___lwdiv@counter
  1769  0318  0AF9               	incf	___lwdiv@counter,f
  1770  0319  2B25               	goto	l1143
  1771  031A                     l1139:	
  1772  031A  3001               	movlw	1
  1773  031B                     u305:	
  1774  031B  1003               	clrc
  1775  031C  0DF2               	rlf	___lwdiv@divisor,f
  1776  031D  0DF3               	rlf	___lwdiv@divisor+1,f
  1777  031E  3EFF               	addlw	-1
  1778  031F  1D03               	skipz
  1779  0320  2B1B               	goto	u305
  1780  0321                     l1141:	
  1781  0321  3001               	movlw	1
  1782  0322  00F6               	movwf	??___lwdiv
  1783  0323  0876               	movf	??___lwdiv,w
  1784  0324  07F9               	addwf	___lwdiv@counter,f
  1785  0325                     l1143:	
  1786  0325  1FF3               	btfss	___lwdiv@divisor+1,7
  1787  0326  2B28               	goto	u311
  1788  0327  2B29               	goto	u310
  1789  0328                     u311:	
  1790  0328  2B1A               	goto	l1139
  1791  0329                     u310:	
  1792  0329                     l1145:	
  1793  0329  3001               	movlw	1
  1794  032A                     u325:	
  1795  032A  1003               	clrc
  1796  032B  0DF7               	rlf	___lwdiv@quotient,f
  1797  032C  0DF8               	rlf	___lwdiv@quotient+1,f
  1798  032D  3EFF               	addlw	-1
  1799  032E  1D03               	skipz
  1800  032F  2B2A               	goto	u325
  1801  0330  0873               	movf	___lwdiv@divisor+1,w
  1802  0331  0275               	subwf	___lwdiv@dividend+1,w
  1803  0332  1D03               	skipz
  1804  0333  2B36               	goto	u335
  1805  0334  0872               	movf	___lwdiv@divisor,w
  1806  0335  0274               	subwf	___lwdiv@dividend,w
  1807  0336                     u335:	
  1808  0336  1C03               	skipc
  1809  0337  2B39               	goto	u331
  1810  0338  2B3A               	goto	u330
  1811  0339                     u331:	
  1812  0339  2B41               	goto	l1151
  1813  033A                     u330:	
  1814  033A                     l1147:	
  1815  033A  0872               	movf	___lwdiv@divisor,w
  1816  033B  02F4               	subwf	___lwdiv@dividend,f
  1817  033C  0873               	movf	___lwdiv@divisor+1,w
  1818  033D  1C03               	skipc
  1819  033E  03F5               	decf	___lwdiv@dividend+1,f
  1820  033F  02F5               	subwf	___lwdiv@dividend+1,f
  1821  0340                     l1149:	
  1822  0340  1477               	bsf	___lwdiv@quotient,0
  1823  0341                     l1151:	
  1824  0341  3001               	movlw	1
  1825  0342                     u345:	
  1826  0342  1003               	clrc
  1827  0343  0CF3               	rrf	___lwdiv@divisor+1,f
  1828  0344  0CF2               	rrf	___lwdiv@divisor,f
  1829  0345  3EFF               	addlw	-1
  1830  0346  1D03               	skipz
  1831  0347  2B42               	goto	u345
  1832  0348                     l1153:	
  1833  0348  3001               	movlw	1
  1834  0349  02F9               	subwf	___lwdiv@counter,f
  1835  034A  1D03               	btfss	3,2
  1836  034B  2B4D               	goto	u351
  1837  034C  2B4E               	goto	u350
  1838  034D                     u351:	
  1839  034D  2B29               	goto	l1145
  1840  034E                     u350:	
  1841  034E                     l1155:	
  1842  034E  0878               	movf	___lwdiv@quotient+1,w
  1843  034F  00F3               	movwf	?___lwdiv+1
  1844  0350  0877               	movf	___lwdiv@quotient,w
  1845  0351  00F2               	movwf	?___lwdiv
  1846  0352                     l567:	
  1847  0352  0008               	return
  1848  0353                     __end_of___lwdiv:	
  1849                           
  1850                           	psect	text7
  1851  0471                     __ptext7:	
  1852 ;; *************** function _setup *****************
  1853 ;; Defined at:
  1854 ;;		line 96 in file "newmain.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;		None
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;		None
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      void 
  1861 ;; Registers used:
  1862 ;;		wreg, status,2
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1868 ;;      Params:         0       0       0       0       0
  1869 ;;      Locals:         0       0       0       0       0
  1870 ;;      Temps:          0       0       0       0       0
  1871 ;;      Totals:         0       0       0       0       0
  1872 ;;Total ram usage:        0 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    1
  1875 ;; This function calls:
  1876 ;;		Nothing
  1877 ;; This function is called by:
  1878 ;;		_main
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           
  1883                           ;psect for function _setup
  1884  0471                     _setup:	
  1885  0471                     l1317:	
  1886                           ;incstack = 0
  1887                           ; Regs used in _setup: [wreg+status,2]
  1888                           
  1889                           
  1890                           ;newmain.c: 98:     PORTA = 0;
  1891  0471  1283               	bcf	3,5	;RP0=0, select bank0
  1892  0472  1303               	bcf	3,6	;RP1=0, select bank0
  1893  0473  0185               	clrf	5	;volatile
  1894                           
  1895                           ;newmain.c: 99:     PORTB = 0;
  1896  0474  0186               	clrf	6	;volatile
  1897                           
  1898                           ;newmain.c: 100:     PORTC = 0;
  1899  0475  0187               	clrf	7	;volatile
  1900                           
  1901                           ;newmain.c: 101:     PORTD = 0;
  1902  0476  0188               	clrf	8	;volatile
  1903                           
  1904                           ;newmain.c: 102:     PORTE = 0;
  1905  0477  0189               	clrf	9	;volatile
  1906                           
  1907                           ;newmain.c: 103:     TRISA = 0;
  1908  0478  1683               	bsf	3,5	;RP0=1, select bank1
  1909  0479  1303               	bcf	3,6	;RP1=0, select bank1
  1910  047A  0185               	clrf	5	;volatile
  1911  047B                     l1319:	
  1912                           
  1913                           ;newmain.c: 104:     TRISB = 0b10000000;
  1914  047B  3080               	movlw	128
  1915  047C  0086               	movwf	6	;volatile
  1916  047D                     l1321:	
  1917                           
  1918                           ;newmain.c: 105:     TRISC = 0;
  1919  047D  0187               	clrf	7	;volatile
  1920  047E                     l1323:	
  1921                           
  1922                           ;newmain.c: 106:     TRISD = 0;
  1923  047E  0188               	clrf	8	;volatile
  1924  047F                     l1325:	
  1925                           
  1926                           ;newmain.c: 107:     TRISE = 0;
  1927  047F  0189               	clrf	9	;volatile
  1928  0480                     l181:	
  1929  0480  0008               	return
  1930  0481                     __end_of_setup:	
  1931                           
  1932                           	psect	text8
  1933  0445                     __ptext8:	
  1934 ;; *************** function _setCursorLCD *****************
  1935 ;; Defined at:
  1936 ;;		line 8 in file "LCD.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;  y               1    wreg     unsigned char 
  1939 ;;  x               1    5[COMMON] unsigned char 
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;  y               1    7[COMMON] unsigned char 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;                  1    wreg      void 
  1944 ;; Registers used:
  1945 ;;		wreg, status,2, status,0, pclath, cstack
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1951 ;;      Params:         1       0       0       0       0
  1952 ;;      Locals:         1       0       0       0       0
  1953 ;;      Temps:          1       0       0       0       0
  1954 ;;      Totals:         3       0       0       0       0
  1955 ;;Total ram usage:        3 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:    2
  1958 ;; This function calls:
  1959 ;;		_cmdLCD
  1960 ;; This function is called by:
  1961 ;;		_main
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           
  1966                           ;psect for function _setCursorLCD
  1967  0445                     _setCursorLCD:	
  1968                           
  1969                           ;incstack = 0
  1970                           ; Regs used in _setCursorLCD: [wreg+status,2+status,0+pclath+cstack]
  1971                           ;setCursorLCD@y stored from wreg
  1972  0445  00F7               	movwf	setCursorLCD@y
  1973  0446                     l1287:	
  1974                           
  1975                           ;LCD.c: 9:     if(y == 1){
  1976  0446  0377               	decf	setCursorLCD@y,w
  1977  0447  1D03               	btfss	3,2
  1978  0448  2C4A               	goto	u521
  1979  0449  2C4B               	goto	u520
  1980  044A                     u521:	
  1981  044A  2C51               	goto	l1291
  1982  044B                     u520:	
  1983  044B                     l1289:	
  1984                           
  1985                           ;LCD.c: 10:         cursor = 0x80 + x - 1;
  1986  044B  0875               	movf	setCursorLCD@x,w
  1987  044C  3E7F               	addlw	127
  1988  044D  00F6               	movwf	??_setCursorLCD
  1989  044E  0876               	movf	??_setCursorLCD,w
  1990  044F  00FA               	movwf	_cursor
  1991                           
  1992                           ;LCD.c: 11:     }else{
  1993  0450  2C56               	goto	l1293
  1994  0451                     l1291:	
  1995                           
  1996                           ;LCD.c: 12:         cursor = 0xC0 + x - 1;
  1997  0451  0875               	movf	setCursorLCD@x,w
  1998  0452  3EBF               	addlw	191
  1999  0453  00F6               	movwf	??_setCursorLCD
  2000  0454  0876               	movf	??_setCursorLCD,w
  2001  0455  00FA               	movwf	_cursor
  2002  0456                     l1293:	
  2003                           
  2004                           ;LCD.c: 14:     cmdLCD(cursor);
  2005  0456  087A               	movf	_cursor,w
  2006  0457  120A  118A  245D  120A  118A  	fcall	_cmdLCD
  2007  045C                     l81:	
  2008  045C  0008               	return
  2009  045D                     __end_of_setCursorLCD:	
  2010                           
  2011                           	psect	text9
  2012  04A0                     __ptext9:	
  2013 ;; *************** function _selCanal *****************
  2014 ;; Defined at:
  2015 ;;		line 10 in file "ADC.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;  channel         1    wreg     unsigned char 
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  channel         1    3[COMMON] unsigned char 
  2020 ;; Return value:  Size  Location     Type
  2021 ;;                  1    wreg      void 
  2022 ;; Registers used:
  2023 ;;		wreg, status,2, status,0
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2029 ;;      Params:         0       0       0       0       0
  2030 ;;      Locals:         1       0       0       0       0
  2031 ;;      Temps:          1       0       0       0       0
  2032 ;;      Totals:         2       0       0       0       0
  2033 ;;Total ram usage:        2 bytes
  2034 ;; Hardware stack levels used:    1
  2035 ;; Hardware stack levels required when called:    1
  2036 ;; This function calls:
  2037 ;;		Nothing
  2038 ;; This function is called by:
  2039 ;;		_main
  2040 ;; This function uses a non-reentrant model
  2041 ;;
  2042                           
  2043                           
  2044                           ;psect for function _selCanal
  2045  04A0                     _selCanal:	
  2046                           
  2047                           ;incstack = 0
  2048                           ; Regs used in _selCanal: [wreg+status,2+status,0]
  2049                           ;selCanal@channel stored from wreg
  2050  04A0  00F3               	movwf	selCanal@channel
  2051  04A1                     l1263:	
  2052                           
  2053                           ;ADC.c: 11:     ADCON0bits.CHS = channel;
  2054  04A1  0873               	movf	selCanal@channel,w
  2055  04A2  00F2               	movwf	??_selCanal
  2056  04A3  0DF2               	rlf	??_selCanal,f
  2057  04A4  0DF2               	rlf	??_selCanal,f
  2058  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  2059  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  2060  04A7  081F               	movf	31,w	;volatile
  2061  04A8  0672               	xorwf	??_selCanal,w
  2062  04A9  39C3               	andlw	-61
  2063  04AA  0672               	xorwf	??_selCanal,w
  2064  04AB  009F               	movwf	31	;volatile
  2065  04AC                     l32:	
  2066  04AC  0008               	return
  2067  04AD                     __end_of_selCanal:	
  2068                           
  2069                           	psect	text10
  2070  04B4                     __ptext10:	
  2071 ;; *************** function _readADC *****************
  2072 ;; Defined at:
  2073 ;;		line 6 in file "ADC.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;		None
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;		None
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      unsigned char 
  2080 ;; Registers used:
  2081 ;;		wreg
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2087 ;;      Params:         0       0       0       0       0
  2088 ;;      Locals:         0       0       0       0       0
  2089 ;;      Temps:          0       0       0       0       0
  2090 ;;      Totals:         0       0       0       0       0
  2091 ;;Total ram usage:        0 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    1
  2094 ;; This function calls:
  2095 ;;		Nothing
  2096 ;; This function is called by:
  2097 ;;		_main
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           
  2102                           ;psect for function _readADC
  2103  04B4                     _readADC:	
  2104  04B4                     l1259:	
  2105                           ;incstack = 0
  2106                           ; Regs used in _readADC: [wreg]
  2107                           
  2108                           
  2109                           ;ADC.c: 7:     return ADRESH;
  2110  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  2111  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  2112  04B6  081E               	movf	30,w	;volatile
  2113  04B7                     l29:	
  2114  04B7  0008               	return
  2115  04B8                     __end_of_readADC:	
  2116                           
  2117                           	psect	text11
  2118  038F                     __ptext11:	
  2119 ;; *************** function _initLCD *****************
  2120 ;; Defined at:
  2121 ;;		line 38 in file "LCD.c"
  2122 ;; Parameters:    Size  Location     Type
  2123 ;;		None
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;		None
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  1    wreg      void 
  2128 ;; Registers used:
  2129 ;;		wreg, status,2, status,0, pclath, cstack
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2135 ;;      Params:         0       0       0       0       0
  2136 ;;      Locals:         0       0       0       0       0
  2137 ;;      Temps:          2       0       0       0       0
  2138 ;;      Totals:         2       0       0       0       0
  2139 ;;Total ram usage:        2 bytes
  2140 ;; Hardware stack levels used:    1
  2141 ;; Hardware stack levels required when called:    2
  2142 ;; This function calls:
  2143 ;;		_cmdLCD
  2144 ;; This function is called by:
  2145 ;;		_main
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           
  2150                           ;psect for function _initLCD
  2151  038F                     _initLCD:	
  2152  038F                     l1297:	
  2153                           ;incstack = 0
  2154                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  2155                           
  2156                           
  2157                           ;LCD.c: 39:      _delay((unsigned long)((15)*(4000000/4000.0)));
  2158  038F  3014               	movlw	20
  2159  0390  00F6               	movwf	??_initLCD+1
  2160  0391  3079               	movlw	121
  2161  0392  00F5               	movwf	??_initLCD
  2162  0393                     u777:	
  2163  0393  0BF5               	decfsz	??_initLCD,f
  2164  0394  2B93               	goto	u777
  2165  0395  0BF6               	decfsz	??_initLCD+1,f
  2166  0396  2B93               	goto	u777
  2167  0397  2B98               	nop2
  2168  0398                     l1299:	
  2169                           
  2170                           ;LCD.c: 40:     cmdLCD(0x030);
  2171  0398  3030               	movlw	48
  2172  0399  120A  118A  245D  120A  118A  	fcall	_cmdLCD
  2173  039E                     l1301:	
  2174                           
  2175                           ;LCD.c: 41:     cmdLCD(0x030);
  2176  039E  3030               	movlw	48
  2177  039F  120A  118A  245D  120A  118A  	fcall	_cmdLCD
  2178  03A4                     l1303:	
  2179                           
  2180                           ;LCD.c: 42:     cmdLCD(0x030);
  2181  03A4  3030               	movlw	48
  2182  03A5  120A  118A  245D  120A  118A  	fcall	_cmdLCD
  2183  03AA                     l1305:	
  2184                           
  2185                           ;LCD.c: 44:     cmdLCD(0x38);
  2186  03AA  3038               	movlw	56
  2187  03AB  120A  118A  245D  120A  118A  	fcall	_cmdLCD
  2188  03B0                     l1307:	
  2189                           
  2190                           ;LCD.c: 45:     cmdLCD(0x10);
  2191  03B0  3010               	movlw	16
  2192  03B1  120A  118A  245D  120A  118A  	fcall	_cmdLCD
  2193  03B6                     l1309:	
  2194                           
  2195                           ;LCD.c: 46:     cmdLCD(0x01);
  2196  03B6  3001               	movlw	1
  2197  03B7  120A  118A  245D  120A  118A  	fcall	_cmdLCD
  2198  03BC                     l1311:	
  2199                           
  2200                           ;LCD.c: 47:     cmdLCD(0x06);
  2201  03BC  3006               	movlw	6
  2202  03BD  120A  118A  245D  120A  118A  	fcall	_cmdLCD
  2203  03C2                     l1313:	
  2204                           
  2205                           ;LCD.c: 48:     cmdLCD(0x0E);
  2206  03C2  300E               	movlw	14
  2207  03C3  120A  118A  245D  120A  118A  	fcall	_cmdLCD
  2208  03C8                     l96:	
  2209  03C8  0008               	return
  2210  03C9                     __end_of_initLCD:	
  2211                           
  2212                           	psect	text12
  2213  001C                     __ptext12:	
  2214 ;; *************** function _configCanal *****************
  2215 ;; Defined at:
  2216 ;;		line 15 in file "ADC.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;  channel         1    wreg     unsigned char 
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;  channel         1    4[COMMON] unsigned char 
  2221 ;; Return value:  Size  Location     Type
  2222 ;;                  1    wreg      void 
  2223 ;; Registers used:
  2224 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2225 ;; Tracked objects:
  2226 ;;		On entry : 0/0
  2227 ;;		On exit  : 0/0
  2228 ;;		Unchanged: 0/0
  2229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2230 ;;      Params:         0       0       0       0       0
  2231 ;;      Locals:         1       0       0       0       0
  2232 ;;      Temps:          2       0       0       0       0
  2233 ;;      Totals:         3       0       0       0       0
  2234 ;;Total ram usage:        3 bytes
  2235 ;; Hardware stack levels used:    1
  2236 ;; Hardware stack levels required when called:    1
  2237 ;; This function calls:
  2238 ;;		Nothing
  2239 ;; This function is called by:
  2240 ;;		_main
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           
  2245                           ;psect for function _configCanal
  2246  001C                     _configCanal:	
  2247                           
  2248                           ;incstack = 0
  2249                           ; Regs used in _configCanal: [wreg-fsr0h+status,2+status,0]
  2250                           ;configCanal@channel stored from wreg
  2251  001C  00F4               	movwf	configCanal@channel
  2252  001D                     l1267:	
  2253                           
  2254                           ;ADC.c: 16:     switch (channel){
  2255  001D  28D4               	goto	l1271
  2256  001E                     l36:	
  2257                           ;ADC.c: 17:         case 0:
  2258                           
  2259                           
  2260                           ;ADC.c: 18:             ADCON0bits.CHS0 = 0;
  2261  001E  1283               	bcf	3,5	;RP0=0, select bank0
  2262  001F  1303               	bcf	3,6	;RP1=0, select bank0
  2263  0020  111F               	bcf	31,2	;volatile
  2264                           
  2265                           ;ADC.c: 19:             ADCON0bits.CHS1 = 0;
  2266  0021  119F               	bcf	31,3	;volatile
  2267                           
  2268                           ;ADC.c: 20:             ADCON0bits.CHS2 = 0;
  2269  0022  121F               	bcf	31,4	;volatile
  2270                           
  2271                           ;ADC.c: 21:             ADCON0bits.CHS3 = 0;
  2272  0023  129F               	bcf	31,5	;volatile
  2273                           
  2274                           ;ADC.c: 22:             ANSELbits.ANS0 = 1;
  2275  0024  1683               	bsf	3,5	;RP0=1, select bank3
  2276  0025  1703               	bsf	3,6	;RP1=1, select bank3
  2277  0026  1408               	bsf	8,0	;volatile
  2278                           
  2279                           ;ADC.c: 23:             TRISAbits.TRISA0 = 1;
  2280  0027  1683               	bsf	3,5	;RP0=1, select bank1
  2281  0028  1303               	bcf	3,6	;RP1=0, select bank1
  2282  0029  1405               	bsf	5,0	;volatile
  2283                           
  2284                           ;ADC.c: 24:             break;
  2285  002A  2908               	goto	l51
  2286  002B                     l38:	
  2287                           ;ADC.c: 25:         case 1:
  2288                           
  2289                           
  2290                           ;ADC.c: 26:             ADCON0bits.CHS0 = 1;
  2291  002B  1283               	bcf	3,5	;RP0=0, select bank0
  2292  002C  1303               	bcf	3,6	;RP1=0, select bank0
  2293  002D  151F               	bsf	31,2	;volatile
  2294                           
  2295                           ;ADC.c: 27:             ADCON0bits.CHS1 = 0;
  2296  002E  119F               	bcf	31,3	;volatile
  2297                           
  2298                           ;ADC.c: 28:             ADCON0bits.CHS2 = 0;
  2299  002F  121F               	bcf	31,4	;volatile
  2300                           
  2301                           ;ADC.c: 29:             ADCON0bits.CHS3 = 0;
  2302  0030  129F               	bcf	31,5	;volatile
  2303                           
  2304                           ;ADC.c: 30:             ANSELbits.ANS1 = 1;
  2305  0031  1683               	bsf	3,5	;RP0=1, select bank3
  2306  0032  1703               	bsf	3,6	;RP1=1, select bank3
  2307  0033  1488               	bsf	8,1	;volatile
  2308                           
  2309                           ;ADC.c: 31:             TRISAbits.TRISA1 = 1;
  2310  0034  1683               	bsf	3,5	;RP0=1, select bank1
  2311  0035  1303               	bcf	3,6	;RP1=0, select bank1
  2312  0036  1485               	bsf	5,1	;volatile
  2313                           
  2314                           ;ADC.c: 32:             break;
  2315  0037  2908               	goto	l51
  2316  0038                     l39:	
  2317                           ;ADC.c: 33:         case 2:
  2318                           
  2319                           
  2320                           ;ADC.c: 34:             ADCON0bits.CHS0 = 0;
  2321  0038  1283               	bcf	3,5	;RP0=0, select bank0
  2322  0039  1303               	bcf	3,6	;RP1=0, select bank0
  2323  003A  111F               	bcf	31,2	;volatile
  2324                           
  2325                           ;ADC.c: 35:             ADCON0bits.CHS1 = 1;
  2326  003B  159F               	bsf	31,3	;volatile
  2327                           
  2328                           ;ADC.c: 36:             ADCON0bits.CHS2 = 0;
  2329  003C  121F               	bcf	31,4	;volatile
  2330                           
  2331                           ;ADC.c: 37:             ADCON0bits.CHS3 = 0;
  2332  003D  129F               	bcf	31,5	;volatile
  2333                           
  2334                           ;ADC.c: 38:             ANSELbits.ANS2 = 1;
  2335  003E  1683               	bsf	3,5	;RP0=1, select bank3
  2336  003F  1703               	bsf	3,6	;RP1=1, select bank3
  2337  0040  1508               	bsf	8,2	;volatile
  2338                           
  2339                           ;ADC.c: 39:             TRISAbits.TRISA2 = 1;
  2340  0041  1683               	bsf	3,5	;RP0=1, select bank1
  2341  0042  1303               	bcf	3,6	;RP1=0, select bank1
  2342  0043  1505               	bsf	5,2	;volatile
  2343                           
  2344                           ;ADC.c: 40:             break;
  2345  0044  2908               	goto	l51
  2346  0045                     l40:	
  2347                           ;ADC.c: 41:         case 3:
  2348                           
  2349                           
  2350                           ;ADC.c: 42:             ADCON0bits.CHS0 = 1;
  2351  0045  1283               	bcf	3,5	;RP0=0, select bank0
  2352  0046  1303               	bcf	3,6	;RP1=0, select bank0
  2353  0047  151F               	bsf	31,2	;volatile
  2354                           
  2355                           ;ADC.c: 43:             ADCON0bits.CHS1 = 1;
  2356  0048  159F               	bsf	31,3	;volatile
  2357                           
  2358                           ;ADC.c: 44:             ADCON0bits.CHS2 = 0;
  2359  0049  121F               	bcf	31,4	;volatile
  2360                           
  2361                           ;ADC.c: 45:             ADCON0bits.CHS3 = 0;
  2362  004A  129F               	bcf	31,5	;volatile
  2363                           
  2364                           ;ADC.c: 46:             ANSELbits.ANS3 = 1;
  2365  004B  1683               	bsf	3,5	;RP0=1, select bank3
  2366  004C  1703               	bsf	3,6	;RP1=1, select bank3
  2367  004D  1588               	bsf	8,3	;volatile
  2368                           
  2369                           ;ADC.c: 47:             TRISAbits.TRISA3 = 1;
  2370  004E  1683               	bsf	3,5	;RP0=1, select bank1
  2371  004F  1303               	bcf	3,6	;RP1=0, select bank1
  2372  0050  1585               	bsf	5,3	;volatile
  2373                           
  2374                           ;ADC.c: 48:             break;
  2375  0051  2908               	goto	l51
  2376  0052                     l41:	
  2377                           ;ADC.c: 49:         case 4:
  2378                           
  2379                           
  2380                           ;ADC.c: 50:             ADCON0bits.CHS0 = 0;
  2381  0052  1283               	bcf	3,5	;RP0=0, select bank0
  2382  0053  1303               	bcf	3,6	;RP1=0, select bank0
  2383  0054  111F               	bcf	31,2	;volatile
  2384                           
  2385                           ;ADC.c: 51:             ADCON0bits.CHS1 = 0;
  2386  0055  119F               	bcf	31,3	;volatile
  2387                           
  2388                           ;ADC.c: 52:             ADCON0bits.CHS2 = 1;
  2389  0056  161F               	bsf	31,4	;volatile
  2390                           
  2391                           ;ADC.c: 53:             ADCON0bits.CHS3 = 0;
  2392  0057  129F               	bcf	31,5	;volatile
  2393                           
  2394                           ;ADC.c: 54:             ANSELbits.ANS4 = 1;
  2395  0058  1683               	bsf	3,5	;RP0=1, select bank3
  2396  0059  1703               	bsf	3,6	;RP1=1, select bank3
  2397  005A  1608               	bsf	8,4	;volatile
  2398                           
  2399                           ;ADC.c: 55:             TRISAbits.TRISA5 = 1;
  2400  005B  1683               	bsf	3,5	;RP0=1, select bank1
  2401  005C  1303               	bcf	3,6	;RP1=0, select bank1
  2402  005D  1685               	bsf	5,5	;volatile
  2403                           
  2404                           ;ADC.c: 56:             break;
  2405  005E  2908               	goto	l51
  2406  005F                     l42:	
  2407                           ;ADC.c: 57:         case 5:
  2408                           
  2409                           
  2410                           ;ADC.c: 58:             ADCON0bits.CHS0 = 1;
  2411  005F  1283               	bcf	3,5	;RP0=0, select bank0
  2412  0060  1303               	bcf	3,6	;RP1=0, select bank0
  2413  0061  151F               	bsf	31,2	;volatile
  2414                           
  2415                           ;ADC.c: 59:             ADCON0bits.CHS1 = 0;
  2416  0062  119F               	bcf	31,3	;volatile
  2417                           
  2418                           ;ADC.c: 60:             ADCON0bits.CHS2 = 1;
  2419  0063  161F               	bsf	31,4	;volatile
  2420                           
  2421                           ;ADC.c: 61:             ADCON0bits.CHS3 = 0;
  2422  0064  129F               	bcf	31,5	;volatile
  2423                           
  2424                           ;ADC.c: 62:             ANSELbits.ANS5 = 1;
  2425  0065  1683               	bsf	3,5	;RP0=1, select bank3
  2426  0066  1703               	bsf	3,6	;RP1=1, select bank3
  2427  0067  1688               	bsf	8,5	;volatile
  2428                           
  2429                           ;ADC.c: 63:             TRISEbits.TRISE0 = 1;
  2430  0068  1683               	bsf	3,5	;RP0=1, select bank1
  2431  0069  1303               	bcf	3,6	;RP1=0, select bank1
  2432  006A  1409               	bsf	9,0	;volatile
  2433                           
  2434                           ;ADC.c: 64:             break;
  2435  006B  2908               	goto	l51
  2436  006C                     l43:	
  2437                           ;ADC.c: 65:         case 6:
  2438                           
  2439                           
  2440                           ;ADC.c: 66:             ADCON0bits.CHS0 = 0;
  2441  006C  1283               	bcf	3,5	;RP0=0, select bank0
  2442  006D  1303               	bcf	3,6	;RP1=0, select bank0
  2443  006E  111F               	bcf	31,2	;volatile
  2444                           
  2445                           ;ADC.c: 67:             ADCON0bits.CHS1 = 1;
  2446  006F  159F               	bsf	31,3	;volatile
  2447                           
  2448                           ;ADC.c: 68:             ADCON0bits.CHS2 = 1;
  2449  0070  161F               	bsf	31,4	;volatile
  2450                           
  2451                           ;ADC.c: 69:             ADCON0bits.CHS3 = 0;
  2452  0071  129F               	bcf	31,5	;volatile
  2453                           
  2454                           ;ADC.c: 70:             ANSELbits.ANS6 = 1;
  2455  0072  1683               	bsf	3,5	;RP0=1, select bank3
  2456  0073  1703               	bsf	3,6	;RP1=1, select bank3
  2457  0074  1708               	bsf	8,6	;volatile
  2458                           
  2459                           ;ADC.c: 71:             TRISEbits.TRISE1 = 1;
  2460  0075  1683               	bsf	3,5	;RP0=1, select bank1
  2461  0076  1303               	bcf	3,6	;RP1=0, select bank1
  2462  0077  1489               	bsf	9,1	;volatile
  2463                           
  2464                           ;ADC.c: 72:             break;
  2465  0078  2908               	goto	l51
  2466  0079                     l44:	
  2467                           ;ADC.c: 73:         case 7:
  2468                           
  2469                           
  2470                           ;ADC.c: 74:             ADCON0bits.CHS0 = 1;
  2471  0079  1283               	bcf	3,5	;RP0=0, select bank0
  2472  007A  1303               	bcf	3,6	;RP1=0, select bank0
  2473  007B  151F               	bsf	31,2	;volatile
  2474                           
  2475                           ;ADC.c: 75:             ADCON0bits.CHS1 = 1;
  2476  007C  159F               	bsf	31,3	;volatile
  2477                           
  2478                           ;ADC.c: 76:             ADCON0bits.CHS2 = 1;
  2479  007D  161F               	bsf	31,4	;volatile
  2480                           
  2481                           ;ADC.c: 77:             ADCON0bits.CHS3 = 0;
  2482  007E  129F               	bcf	31,5	;volatile
  2483                           
  2484                           ;ADC.c: 78:             ANSELbits.ANS7 = 1;
  2485  007F  1683               	bsf	3,5	;RP0=1, select bank3
  2486  0080  1703               	bsf	3,6	;RP1=1, select bank3
  2487  0081  1788               	bsf	8,7	;volatile
  2488                           
  2489                           ;ADC.c: 79:             TRISEbits.TRISE2 = 1;
  2490  0082  1683               	bsf	3,5	;RP0=1, select bank1
  2491  0083  1303               	bcf	3,6	;RP1=0, select bank1
  2492  0084  1509               	bsf	9,2	;volatile
  2493                           
  2494                           ;ADC.c: 80:             break;
  2495  0085  2908               	goto	l51
  2496  0086                     l45:	
  2497                           ;ADC.c: 81:         case 8:
  2498                           
  2499                           
  2500                           ;ADC.c: 82:             ADCON0bits.CHS0 = 0;
  2501  0086  1283               	bcf	3,5	;RP0=0, select bank0
  2502  0087  1303               	bcf	3,6	;RP1=0, select bank0
  2503  0088  111F               	bcf	31,2	;volatile
  2504                           
  2505                           ;ADC.c: 83:             ADCON0bits.CHS1 = 0;
  2506  0089  119F               	bcf	31,3	;volatile
  2507                           
  2508                           ;ADC.c: 84:             ADCON0bits.CHS2 = 0;
  2509  008A  121F               	bcf	31,4	;volatile
  2510                           
  2511                           ;ADC.c: 85:             ADCON0bits.CHS3 = 1;
  2512  008B  169F               	bsf	31,5	;volatile
  2513                           
  2514                           ;ADC.c: 86:             ANSELHbits.ANS8 = 1;
  2515  008C  1683               	bsf	3,5	;RP0=1, select bank3
  2516  008D  1703               	bsf	3,6	;RP1=1, select bank3
  2517  008E  1409               	bsf	9,0	;volatile
  2518                           
  2519                           ;ADC.c: 87:             TRISBbits.TRISB2 = 1;
  2520  008F  1683               	bsf	3,5	;RP0=1, select bank1
  2521  0090  1303               	bcf	3,6	;RP1=0, select bank1
  2522  0091  1506               	bsf	6,2	;volatile
  2523                           
  2524                           ;ADC.c: 88:             break;
  2525  0092  2908               	goto	l51
  2526  0093                     l46:	
  2527                           ;ADC.c: 89:         case 9:
  2528                           
  2529                           
  2530                           ;ADC.c: 90:             ADCON0bits.CHS0 = 1;
  2531  0093  1283               	bcf	3,5	;RP0=0, select bank0
  2532  0094  1303               	bcf	3,6	;RP1=0, select bank0
  2533  0095  151F               	bsf	31,2	;volatile
  2534                           
  2535                           ;ADC.c: 91:             ADCON0bits.CHS1 = 0;
  2536  0096  119F               	bcf	31,3	;volatile
  2537                           
  2538                           ;ADC.c: 92:             ADCON0bits.CHS2 = 0;
  2539  0097  121F               	bcf	31,4	;volatile
  2540                           
  2541                           ;ADC.c: 93:             ADCON0bits.CHS3 = 1;
  2542  0098  169F               	bsf	31,5	;volatile
  2543                           
  2544                           ;ADC.c: 94:             ANSELHbits.ANS9 = 1;
  2545  0099  1683               	bsf	3,5	;RP0=1, select bank3
  2546  009A  1703               	bsf	3,6	;RP1=1, select bank3
  2547  009B  1489               	bsf	9,1	;volatile
  2548                           
  2549                           ;ADC.c: 95:             TRISBbits.TRISB3 = 1;
  2550  009C  1683               	bsf	3,5	;RP0=1, select bank1
  2551  009D  1303               	bcf	3,6	;RP1=0, select bank1
  2552  009E  1586               	bsf	6,3	;volatile
  2553                           
  2554                           ;ADC.c: 96:             break;
  2555  009F  2908               	goto	l51
  2556  00A0                     l47:	
  2557                           ;ADC.c: 97:         case 10:
  2558                           
  2559                           
  2560                           ;ADC.c: 98:             ADCON0bits.CHS0 = 0;
  2561  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  2562  00A1  1303               	bcf	3,6	;RP1=0, select bank0
  2563  00A2  111F               	bcf	31,2	;volatile
  2564                           
  2565                           ;ADC.c: 99:             ADCON0bits.CHS1 = 1;
  2566  00A3  159F               	bsf	31,3	;volatile
  2567                           
  2568                           ;ADC.c: 100:             ADCON0bits.CHS2 = 0;
  2569  00A4  121F               	bcf	31,4	;volatile
  2570                           
  2571                           ;ADC.c: 101:             ADCON0bits.CHS3 = 1;
  2572  00A5  169F               	bsf	31,5	;volatile
  2573                           
  2574                           ;ADC.c: 102:             ANSELHbits.ANS10 = 1;
  2575  00A6  1683               	bsf	3,5	;RP0=1, select bank3
  2576  00A7  1703               	bsf	3,6	;RP1=1, select bank3
  2577  00A8  1509               	bsf	9,2	;volatile
  2578                           
  2579                           ;ADC.c: 103:             TRISBbits.TRISB1 = 1;
  2580  00A9  1683               	bsf	3,5	;RP0=1, select bank1
  2581  00AA  1303               	bcf	3,6	;RP1=0, select bank1
  2582  00AB  1486               	bsf	6,1	;volatile
  2583                           
  2584                           ;ADC.c: 104:             break;
  2585  00AC  2908               	goto	l51
  2586  00AD                     l48:	
  2587                           ;ADC.c: 105:         case 11:
  2588                           
  2589                           
  2590                           ;ADC.c: 106:             ADCON0bits.CHS0 = 1;
  2591  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  2592  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  2593  00AF  151F               	bsf	31,2	;volatile
  2594                           
  2595                           ;ADC.c: 107:             ADCON0bits.CHS1 = 1;
  2596  00B0  159F               	bsf	31,3	;volatile
  2597                           
  2598                           ;ADC.c: 108:             ADCON0bits.CHS2 = 0;
  2599  00B1  121F               	bcf	31,4	;volatile
  2600                           
  2601                           ;ADC.c: 109:             ADCON0bits.CHS3 = 1;
  2602  00B2  169F               	bsf	31,5	;volatile
  2603                           
  2604                           ;ADC.c: 110:             ANSELHbits.ANS11 = 1;
  2605  00B3  1683               	bsf	3,5	;RP0=1, select bank3
  2606  00B4  1703               	bsf	3,6	;RP1=1, select bank3
  2607  00B5  1589               	bsf	9,3	;volatile
  2608                           
  2609                           ;ADC.c: 111:             TRISBbits.TRISB4 = 1;
  2610  00B6  1683               	bsf	3,5	;RP0=1, select bank1
  2611  00B7  1303               	bcf	3,6	;RP1=0, select bank1
  2612  00B8  1606               	bsf	6,4	;volatile
  2613                           
  2614                           ;ADC.c: 112:             break;
  2615  00B9  2908               	goto	l51
  2616  00BA                     l49:	
  2617                           ;ADC.c: 113:         case 12:
  2618                           
  2619                           
  2620                           ;ADC.c: 114:             ADCON0bits.CHS0 = 0;
  2621  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  2622  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  2623  00BC  111F               	bcf	31,2	;volatile
  2624                           
  2625                           ;ADC.c: 115:             ADCON0bits.CHS1 = 0;
  2626  00BD  119F               	bcf	31,3	;volatile
  2627                           
  2628                           ;ADC.c: 116:             ADCON0bits.CHS2 = 1;
  2629  00BE  161F               	bsf	31,4	;volatile
  2630                           
  2631                           ;ADC.c: 117:             ADCON0bits.CHS3 = 1;
  2632  00BF  169F               	bsf	31,5	;volatile
  2633                           
  2634                           ;ADC.c: 118:             ANSELHbits.ANS12 = 1;
  2635  00C0  1683               	bsf	3,5	;RP0=1, select bank3
  2636  00C1  1703               	bsf	3,6	;RP1=1, select bank3
  2637  00C2  1609               	bsf	9,4	;volatile
  2638                           
  2639                           ;ADC.c: 119:             TRISBbits.TRISB0 = 1;
  2640  00C3  1683               	bsf	3,5	;RP0=1, select bank1
  2641  00C4  1303               	bcf	3,6	;RP1=0, select bank1
  2642  00C5  1406               	bsf	6,0	;volatile
  2643                           
  2644                           ;ADC.c: 120:             break;
  2645  00C6  2908               	goto	l51
  2646  00C7                     l50:	
  2647                           ;ADC.c: 121:         case 13:
  2648                           
  2649                           
  2650                           ;ADC.c: 122:             ADCON0bits.CHS0 = 1;
  2651  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  2652  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  2653  00C9  151F               	bsf	31,2	;volatile
  2654                           
  2655                           ;ADC.c: 123:             ADCON0bits.CHS1 = 0;
  2656  00CA  119F               	bcf	31,3	;volatile
  2657                           
  2658                           ;ADC.c: 124:             ADCON0bits.CHS2 = 1;
  2659  00CB  161F               	bsf	31,4	;volatile
  2660                           
  2661                           ;ADC.c: 125:             ADCON0bits.CHS3 = 1;
  2662  00CC  169F               	bsf	31,5	;volatile
  2663                           
  2664                           ;ADC.c: 126:             ANSELHbits.ANS13 = 1;
  2665  00CD  1683               	bsf	3,5	;RP0=1, select bank3
  2666  00CE  1703               	bsf	3,6	;RP1=1, select bank3
  2667  00CF  1689               	bsf	9,5	;volatile
  2668                           
  2669                           ;ADC.c: 127:             TRISBbits.TRISB5 = 1;
  2670  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  2671  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  2672  00D2  1686               	bsf	6,5	;volatile
  2673                           
  2674                           ;ADC.c: 128:             break;
  2675  00D3  2908               	goto	l51
  2676  00D4                     l1271:	
  2677  00D4  0874               	movf	configCanal@channel,w
  2678  00D5  00F2               	movwf	??_configCanal
  2679  00D6  01F3               	clrf	??_configCanal+1
  2680                           
  2681                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2682                           ; Switch size 1, requested type "simple"
  2683                           ; Number of cases is 1, Range of values is 0 to 0
  2684                           ; switch strategies available:
  2685                           ; Name         Instructions Cycles
  2686                           ; simple_byte            4     3 (average)
  2687                           ; direct_byte           11     8 (fixed)
  2688                           ; jumptable            260     6 (fixed)
  2689                           ;	Chosen strategy is simple_byte
  2690  00D7  0873               	movf	??_configCanal+1,w
  2691  00D8  3A00               	xorlw	0	; case 0
  2692  00D9  1903               	skipnz
  2693  00DA  28DC               	goto	l1671
  2694  00DB  2908               	goto	l51
  2695  00DC                     l1671:	
  2696                           
  2697                           ; Switch size 1, requested type "simple"
  2698                           ; Number of cases is 14, Range of values is 0 to 13
  2699                           ; switch strategies available:
  2700                           ; Name         Instructions Cycles
  2701                           ; simple_byte           43    22 (average)
  2702                           ; direct_byte           50     8 (fixed)
  2703                           ; jumptable            260     6 (fixed)
  2704                           ;	Chosen strategy is simple_byte
  2705  00DC  0872               	movf	??_configCanal,w
  2706  00DD  3A00               	xorlw	0	; case 0
  2707  00DE  1903               	skipnz
  2708  00DF  281E               	goto	l36
  2709  00E0  3A01               	xorlw	1	; case 1
  2710  00E1  1903               	skipnz
  2711  00E2  282B               	goto	l38
  2712  00E3  3A03               	xorlw	3	; case 2
  2713  00E4  1903               	skipnz
  2714  00E5  2838               	goto	l39
  2715  00E6  3A01               	xorlw	1	; case 3
  2716  00E7  1903               	skipnz
  2717  00E8  2845               	goto	l40
  2718  00E9  3A07               	xorlw	7	; case 4
  2719  00EA  1903               	skipnz
  2720  00EB  2852               	goto	l41
  2721  00EC  3A01               	xorlw	1	; case 5
  2722  00ED  1903               	skipnz
  2723  00EE  285F               	goto	l42
  2724  00EF  3A03               	xorlw	3	; case 6
  2725  00F0  1903               	skipnz
  2726  00F1  286C               	goto	l43
  2727  00F2  3A01               	xorlw	1	; case 7
  2728  00F3  1903               	skipnz
  2729  00F4  2879               	goto	l44
  2730  00F5  3A0F               	xorlw	15	; case 8
  2731  00F6  1903               	skipnz
  2732  00F7  2886               	goto	l45
  2733  00F8  3A01               	xorlw	1	; case 9
  2734  00F9  1903               	skipnz
  2735  00FA  2893               	goto	l46
  2736  00FB  3A03               	xorlw	3	; case 10
  2737  00FC  1903               	skipnz
  2738  00FD  28A0               	goto	l47
  2739  00FE  3A01               	xorlw	1	; case 11
  2740  00FF  1903               	skipnz
  2741  0100  28AD               	goto	l48
  2742  0101  3A07               	xorlw	7	; case 12
  2743  0102  1903               	skipnz
  2744  0103  28BA               	goto	l49
  2745  0104  3A01               	xorlw	1	; case 13
  2746  0105  1903               	skipnz
  2747  0106  28C7               	goto	l50
  2748  0107  2908               	goto	l51
  2749  0108                     l51:	
  2750  0108  0008               	return
  2751  0109                     __end_of_configCanal:	
  2752                           
  2753                           	psect	text13
  2754  03C9                     __ptext13:	
  2755 ;; *************** function _configADC *****************
  2756 ;; Defined at:
  2757 ;;		line 133 in file "ADC.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;  FOSC            1    wreg     unsigned char 
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;  FOSC            1    4[COMMON] unsigned char 
  2762 ;; Return value:  Size  Location     Type
  2763 ;;                  1    wreg      void 
  2764 ;; Registers used:
  2765 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2766 ;; Tracked objects:
  2767 ;;		On entry : 0/0
  2768 ;;		On exit  : 0/0
  2769 ;;		Unchanged: 0/0
  2770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2771 ;;      Params:         0       0       0       0       0
  2772 ;;      Locals:         1       0       0       0       0
  2773 ;;      Temps:          2       0       0       0       0
  2774 ;;      Totals:         3       0       0       0       0
  2775 ;;Total ram usage:        3 bytes
  2776 ;; Hardware stack levels used:    1
  2777 ;; Hardware stack levels required when called:    1
  2778 ;; This function calls:
  2779 ;;		Nothing
  2780 ;; This function is called by:
  2781 ;;		_main
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           
  2786                           ;psect for function _configADC
  2787  03C9                     _configADC:	
  2788                           
  2789                           ;incstack = 0
  2790                           ; Regs used in _configADC: [wreg-fsr0h+status,2+status,0]
  2791                           ;configADC@FOSC stored from wreg
  2792  03C9  00F4               	movwf	configADC@FOSC
  2793  03CA                     l1277:	
  2794                           
  2795                           ;ADC.c: 135:     INTCONbits.PEIE=1;
  2796  03CA  170B               	bsf	11,6	;volatile
  2797                           
  2798                           ;ADC.c: 136:     PIE1bits.ADIE = 1;
  2799  03CB  1683               	bsf	3,5	;RP0=1, select bank1
  2800  03CC  1303               	bcf	3,6	;RP1=0, select bank1
  2801  03CD  170C               	bsf	12,6	;volatile
  2802                           
  2803                           ;ADC.c: 137:     PIR1bits.ADIF=0;
  2804  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  2805  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  2806  03D0  130C               	bcf	12,6	;volatile
  2807                           
  2808                           ;ADC.c: 138:     ADCON1bits.ADFM=0;
  2809  03D1  1683               	bsf	3,5	;RP0=1, select bank1
  2810  03D2  1303               	bcf	3,6	;RP1=0, select bank1
  2811  03D3  139F               	bcf	31,7	;volatile
  2812                           
  2813                           ;ADC.c: 139:     ADCON1bits.VCFG1=0;
  2814  03D4  129F               	bcf	31,5	;volatile
  2815                           
  2816                           ;ADC.c: 140:     ADCON1bits.VCFG0=0;
  2817  03D5  121F               	bcf	31,4	;volatile
  2818                           
  2819                           ;ADC.c: 141:     ADCON0bits.ADON=1;
  2820  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  2821  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  2822  03D8  141F               	bsf	31,0	;volatile
  2823                           
  2824                           ;ADC.c: 143:     switch (FOSC){
  2825  03D9  2BE6               	goto	l1281
  2826  03DA                     l55:	
  2827                           ;ADC.c: 144:         case 0:
  2828                           
  2829                           
  2830                           ;ADC.c: 145:             ADCON0bits.ADCS1=0;
  2831  03DA  139F               	bcf	31,7	;volatile
  2832                           
  2833                           ;ADC.c: 146:             ADCON0bits.ADCS0=0;
  2834  03DB  131F               	bcf	31,6	;volatile
  2835                           
  2836                           ;ADC.c: 147:             break;
  2837  03DC  2BFC               	goto	l56
  2838  03DD                     l57:	
  2839                           ;ADC.c: 148:         case 1:
  2840                           
  2841                           
  2842                           ;ADC.c: 149:             ADCON0bits.ADCS1=0;
  2843  03DD  139F               	bcf	31,7	;volatile
  2844                           
  2845                           ;ADC.c: 150:             ADCON0bits.ADCS0=1;
  2846  03DE  171F               	bsf	31,6	;volatile
  2847                           
  2848                           ;ADC.c: 151:             break;
  2849  03DF  2BFC               	goto	l56
  2850  03E0                     l58:	
  2851                           ;ADC.c: 152:         case 2:
  2852                           
  2853                           
  2854                           ;ADC.c: 153:             ADCON0bits.ADCS1=1;
  2855  03E0  179F               	bsf	31,7	;volatile
  2856                           
  2857                           ;ADC.c: 154:             ADCON0bits.ADCS0=0;
  2858  03E1  131F               	bcf	31,6	;volatile
  2859                           
  2860                           ;ADC.c: 155:             break;
  2861  03E2  2BFC               	goto	l56
  2862  03E3                     l59:	
  2863                           ;ADC.c: 156:         case 3:
  2864                           
  2865                           
  2866                           ;ADC.c: 157:             ADCON0bits.ADCS1=1;
  2867  03E3  179F               	bsf	31,7	;volatile
  2868                           
  2869                           ;ADC.c: 158:             ADCON0bits.ADCS0=1;
  2870  03E4  171F               	bsf	31,6	;volatile
  2871                           
  2872                           ;ADC.c: 159:             break;
  2873  03E5  2BFC               	goto	l56
  2874  03E6                     l1281:	
  2875  03E6  0874               	movf	configADC@FOSC,w
  2876  03E7  00F2               	movwf	??_configADC
  2877  03E8  01F3               	clrf	??_configADC+1
  2878                           
  2879                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2880                           ; Switch size 1, requested type "simple"
  2881                           ; Number of cases is 1, Range of values is 0 to 0
  2882                           ; switch strategies available:
  2883                           ; Name         Instructions Cycles
  2884                           ; simple_byte            4     3 (average)
  2885                           ; direct_byte           11     8 (fixed)
  2886                           ; jumptable            260     6 (fixed)
  2887                           ;	Chosen strategy is simple_byte
  2888  03E9  0873               	movf	??_configADC+1,w
  2889  03EA  3A00               	xorlw	0	; case 0
  2890  03EB  1903               	skipnz
  2891  03EC  2BEE               	goto	l1673
  2892  03ED  2BFC               	goto	l56
  2893  03EE                     l1673:	
  2894                           
  2895                           ; Switch size 1, requested type "simple"
  2896                           ; Number of cases is 4, Range of values is 0 to 3
  2897                           ; switch strategies available:
  2898                           ; Name         Instructions Cycles
  2899                           ; simple_byte           13     7 (average)
  2900                           ; direct_byte           20     8 (fixed)
  2901                           ; jumptable            260     6 (fixed)
  2902                           ;	Chosen strategy is simple_byte
  2903  03EE  0872               	movf	??_configADC,w
  2904  03EF  3A00               	xorlw	0	; case 0
  2905  03F0  1903               	skipnz
  2906  03F1  2BDA               	goto	l55
  2907  03F2  3A01               	xorlw	1	; case 1
  2908  03F3  1903               	skipnz
  2909  03F4  2BDD               	goto	l57
  2910  03F5  3A03               	xorlw	3	; case 2
  2911  03F6  1903               	skipnz
  2912  03F7  2BE0               	goto	l58
  2913  03F8  3A01               	xorlw	1	; case 3
  2914  03F9  1903               	skipnz
  2915  03FA  2BE3               	goto	l59
  2916  03FB  2BFC               	goto	l56
  2917  03FC                     l56:	
  2918                           
  2919                           ;ADC.c: 162:     ADCON0bits.GO_DONE=1;
  2920  03FC  149F               	bsf	31,1	;volatile
  2921                           
  2922                           ;ADC.c: 163:     INTCONbits.GIE = 1;
  2923  03FD  178B               	bsf	11,7	;volatile
  2924  03FE                     l60:	
  2925                           ;ADC.c: 164:     return;
  2926                           
  2927  03FE  0008               	return
  2928  03FF                     __end_of_configADC:	
  2929                           
  2930                           	psect	text14
  2931  04AD                     __ptext14:	
  2932 ;; *************** function _clcLCD *****************
  2933 ;; Defined at:
  2934 ;;		line 17 in file "LCD.c"
  2935 ;; Parameters:    Size  Location     Type
  2936 ;;		None
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;		None
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  1    wreg      void 
  2941 ;; Registers used:
  2942 ;;		wreg, status,2, status,0, pclath, cstack
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2948 ;;      Params:         0       0       0       0       0
  2949 ;;      Locals:         0       0       0       0       0
  2950 ;;      Temps:          0       0       0       0       0
  2951 ;;      Totals:         0       0       0       0       0
  2952 ;;Total ram usage:        0 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    2
  2955 ;; This function calls:
  2956 ;;		_cmdLCD
  2957 ;; This function is called by:
  2958 ;;		_main
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           
  2963                           ;psect for function _clcLCD
  2964  04AD                     _clcLCD:	
  2965  04AD                     l1295:	
  2966                           ;incstack = 0
  2967                           ; Regs used in _clcLCD: [wreg+status,2+status,0+pclath+cstack]
  2968                           
  2969                           
  2970                           ;LCD.c: 18:     cmdLCD(0x01);
  2971  04AD  3001               	movlw	1
  2972  04AE  120A  118A  245D  120A  118A  	fcall	_cmdLCD
  2973  04B3                     l84:	
  2974  04B3  0008               	return
  2975  04B4                     __end_of_clcLCD:	
  2976                           
  2977                           	psect	text15
  2978  045D                     __ptext15:	
  2979 ;; *************** function _cmdLCD *****************
  2980 ;; Defined at:
  2981 ;;		line 51 in file "LCD.c"
  2982 ;; Parameters:    Size  Location     Type
  2983 ;;  cmd             1    wreg     unsigned char 
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;  cmd             1    4[COMMON] unsigned char 
  2986 ;; Return value:  Size  Location     Type
  2987 ;;                  1    wreg      void 
  2988 ;; Registers used:
  2989 ;;		wreg
  2990 ;; Tracked objects:
  2991 ;;		On entry : 0/0
  2992 ;;		On exit  : 0/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2995 ;;      Params:         0       0       0       0       0
  2996 ;;      Locals:         1       0       0       0       0
  2997 ;;      Temps:          2       0       0       0       0
  2998 ;;      Totals:         3       0       0       0       0
  2999 ;;Total ram usage:        3 bytes
  3000 ;; Hardware stack levels used:    1
  3001 ;; Hardware stack levels required when called:    1
  3002 ;; This function calls:
  3003 ;;		Nothing
  3004 ;; This function is called by:
  3005 ;;		_setCursorLCD
  3006 ;;		_clcLCD
  3007 ;;		_initLCD
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           
  3012                           ;psect for function _cmdLCD
  3013  045D                     _cmdLCD:	
  3014                           
  3015                           ;incstack = 0
  3016                           ; Regs used in _cmdLCD: [wreg]
  3017                           ;cmdLCD@cmd stored from wreg
  3018  045D  00F4               	movwf	cmdLCD@cmd
  3019  045E                     l1181:	
  3020                           
  3021                           ;LCD.c: 52:     RC0 = 0;
  3022  045E  1283               	bcf	3,5	;RP0=0, select bank0
  3023  045F  1303               	bcf	3,6	;RP1=0, select bank0
  3024  0460  1007               	bcf	7,0	;volatile
  3025  0461                     l1183:	
  3026                           
  3027                           ;LCD.c: 53:  PORTA = cmd;
  3028  0461  0874               	movf	cmdLCD@cmd,w
  3029  0462  0085               	movwf	5	;volatile
  3030  0463                     l1185:	
  3031                           
  3032                           ;LCD.c: 54:  RC1 = 1;
  3033  0463  1487               	bsf	7,1	;volatile
  3034                           
  3035                           ;LCD.c: 55:     _delay((unsigned long)((4)*(4000000/4000.0)));
  3036  0464  3006               	movlw	6
  3037  0465  00F3               	movwf	??_cmdLCD+1
  3038  0466  3030               	movlw	48
  3039  0467  00F2               	movwf	??_cmdLCD
  3040  0468                     u787:	
  3041  0468  0BF2               	decfsz	??_cmdLCD,f
  3042  0469  2C68               	goto	u787
  3043  046A  0BF3               	decfsz	??_cmdLCD+1,f
  3044  046B  2C68               	goto	u787
  3045  046C  0000               	nop
  3046  046D                     l1187:	
  3047                           
  3048                           ;LCD.c: 56:     RC1 = 0;
  3049  046D  1283               	bcf	3,5	;RP0=0, select bank0
  3050  046E  1303               	bcf	3,6	;RP1=0, select bank0
  3051  046F  1087               	bcf	7,1	;volatile
  3052  0470                     l99:	
  3053  0470  0008               	return
  3054  0471                     __end_of_cmdLCD:	
  3055                           
  3056                           	psect	text16
  3057  0481                     __ptext16:	
  3058 ;; *************** function _ISR *****************
  3059 ;; Defined at:
  3060 ;;		line 37 in file "newmain.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;		None
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;		None
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  1    wreg      void 
  3067 ;; Registers used:
  3068 ;;		None
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3074 ;;      Params:         0       0       0       0       0
  3075 ;;      Locals:         0       0       0       0       0
  3076 ;;      Temps:          2       0       0       0       0
  3077 ;;      Totals:         2       0       0       0       0
  3078 ;;Total ram usage:        2 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; This function calls:
  3081 ;;		Nothing
  3082 ;; This function is called by:
  3083 ;;		Interrupt level 1
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           
  3088                           ;psect for function _ISR
  3089  0481                     _ISR:	
  3090  0481                     i1l1327:	
  3091                           
  3092                           ;newmain.c: 38:     if(ADCON0bits.GO_DONE == 0){
  3093  0481  1283               	bcf	3,5	;RP0=0, select bank0
  3094  0482  1303               	bcf	3,6	;RP1=0, select bank0
  3095  0483  189F               	btfsc	31,1	;volatile
  3096  0484  2C86               	goto	u53_21
  3097  0485  2C87               	goto	u53_20
  3098  0486                     u53_21:	
  3099  0486  2C8A               	goto	i1l166
  3100  0487                     u53_20:	
  3101  0487                     i1l1329:	
  3102                           
  3103                           ;newmain.c: 39:         adc = 1;
  3104  0487  01C0               	clrf	_adc
  3105  0488  0AC0               	incf	_adc,f
  3106                           
  3107                           ;newmain.c: 40:         PIR1bits.ADIF = 0;
  3108  0489  130C               	bcf	12,6	;volatile
  3109  048A                     i1l166:	
  3110  048A  0871               	movf	??_ISR+1,w
  3111  048B  008A               	movwf	10
  3112  048C  0E70               	swapf	??_ISR^(0+4294967168),w
  3113  048D  0083               	movwf	3
  3114  048E  0EFE               	swapf	btemp,f
  3115  048F  0E7E               	swapf	btemp,w
  3116  0490  0009               	retfie
  3117  0491                     __end_of_ISR:	
  3118  007E                     btemp	set	126	;btemp
  3119  007E                     wtemp0	set	126
  3120                           
  3121                           	psect	intentry
  3122  0004                     __pintentry:	
  3123                           ;incstack = 0
  3124                           ; Regs used in _ISR: []
  3125                           
  3126  0004                     interrupt_function:	
  3127  007E                     saved_w	set	btemp
  3128  0004  00FE               	movwf	btemp
  3129  0005  0E03               	swapf	3,w
  3130  0006  00F0               	movwf	??_ISR
  3131  0007  080A               	movf	10,w
  3132  0008  00F1               	movwf	??_ISR+1
  3133  0009  120A  118A  2C81   	ljmp	_ISR


Data Sizes:
    Strings     13
    Constant    10
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     28      33
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 4
		 -> writeIntLCD@buffer(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    writeStrLCD@string	PTR unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), STR_3(CODE[3]), STR_2(CODE[3]), writeIntLCD@buffer(BANK0[4]), 


Critical Paths under _main in COMMON

    _writeStrLCD->_writeCharLCD
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _setCursorLCD->_cmdLCD
    _initLCD->_cmdLCD
    _clcLCD->_cmdLCD

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_writeIntLCD
    _writeIntLCD->_sprintf
    _sprintf->___lwmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    3443
                                             27 BANK0      1     1      0
                             _clcLCD
                          _configADC
                        _configCanal
                            _initLCD
                            _readADC
                           _selCanal
                       _setCursorLCD
                              _setup
                        _writeIntLCD
                        _writeStrLCD
 ---------------------------------------------------------------------------------
 (1) _writeIntLCD                                          8     8      0    2192
                                             19 BANK0      8     8      0
                            _sprintf
                        _writeStrLCD
 ---------------------------------------------------------------------------------
 (1) _writeStrLCD                                          7     5      2     521
                                              4 COMMON     5     3      2
                                              0 BANK0      2     2      0
                       _writeCharLCD
 ---------------------------------------------------------------------------------
 (2) _writeCharLCD                                         2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1548
                                              6 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     412
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setCursorLCD                                         3     2      1     620
                                              5 COMMON     3     2      1
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (1) _selCanal                                             2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _readADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              2     2      0      22
                                              5 COMMON     2     2      0
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (1) _configCanal                                          3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _configADC                                            3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _clcLCD                                               0     0      0      22
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (2) _cmdLCD                                               3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clcLCD
     _cmdLCD
   _configADC
   _configCanal
   _initLCD
     _cmdLCD
   _readADC
   _selCanal
   _setCursorLCD
     _cmdLCD
   _setup
   _writeIntLCD
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _writeStrLCD
       _writeCharLCD
   _writeStrLCD
     _writeCharLCD

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1C      21       5       41.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2D      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Feb 12 00:19:04 2020

                       pc 0002               __CFG_CP$OFF 0000           writeStrLCD@cont 0020  
                      l40 0045                        l32 04AC                        l41 0052  
                      l50 00C7                        l42 005F                        l43 006C  
                      l51 0108                        l60 03FE                        l44 0079  
                      l36 001E                        l45 0086                        l29 04B7  
                      l46 0093                        l38 002B                        l55 03DA  
                      l47 00A0                        l39 0038                        l56 03FC  
                      l48 00AD                        l57 03DD                        l49 00BA  
                      l81 045C                        l58 03E0                        l90 030E  
                      l59 03E3                        l84 04B3                        l93 049F  
                      l96 03C8                        l99 0470                        fsr 0004  
                     l102 0444                       l181 0480                       l291 01F2  
                     l567 0352                       l577 038E                       _RC0 0038  
                     _RC1 0039                       u310 0329                       u311 0328  
                     u305 031B                       u330 033A                       u331 0339  
                     u325 032A                       u350 034E                       u351 034D  
                     u335 0336                       u520 044B                       u600 0377  
                     u521 044A                       u345 0342                       u601 0376  
                     u290 0317              __CFG_CPD$OFF 0000                       u291 0316  
                     u620 038A                       u700 0188                       _ISR 0481  
                     u621 0389                       u605 0373                       u701 0187  
                     u710 01DC                       u630 02D8                       u615 037E  
                     u711 01DB                       u720 01EE                       u640 02FC  
                     u721 01ED                       u570 035B                       u650 030E  
                     u730 025E                       u571 035A                       u651 030D  
                     u731 025D                       u660 0117                       u740 0266  
                     u661 0116                       u741 0265                       u590 036D  
                     u670 0151                       u750 02C4                       u591 036C  
                     u671 0150                       u751 02C3                       u680 0177  
                     u585 035F                       u681 0176                       u690 0182  
                     u691 0181                       u685 0173                       u767 049A  
                     u777 0393                       u787 0468                       _adc 0040  
                     fsr0 0004                       indf 0000              __CFG_LVP$OFF 0000  
                    ?_ISR 0070                      l1301 039E                      l1141 0321  
                    l1133 030F                      l1311 03BC                      l1303 03A4  
                    l1151 0341                      l1143 0325                      l1135 0311  
                    l1313 03C2                      l1305 03AA                      l1321 047D  
                    l1153 0348                      l1145 0329                      l1137 0317  
                    l1307 03B0                      l1323 047E                      l1147 033A  
                    l1139 031A                      l1155 034E                      l1181 045E  
                    l1309 03B6                      l1325 047F                      l1317 0471  
                    l1149 0340                      l1501 0141                      l1183 0461  
                    l1271 00D4                      l1263 04A1                      l1319 047B  
                    l1511 015A                      l1503 0149                      l1185 0463  
                    l1281 03E6                      l1521 0178                      l1505 014D  
                    l1601 02AC                      l1187 046D                      l1267 001D  
                    l1259 04B4                      l1291 0451                      l1531 0198  
                    l1523 0182                      l1507 0151                      l1451 0495  
                    l1603 02B8                      l1277 03CA                      l1293 0456  
                    l1461 035E                      l1533 01C8                      l1525 0188  
                    l1517 015C                      l1509 0155                      l1541 01EE  
                    l1453 0497                      l1605 02BE                      l1295 04AD  
                    l1287 0446                      l1471 037D                      l1463 0365  
                    l1535 01CF                      l1527 018F                      l1455 049C  
                    l1607 02C4                      l1551 01F3                      l1297 038F  
                    l1289 044B                      l1473 0384                      l1465 0369  
                    l1457 0353                      l1537 01D3                      l1529 0193  
                    l1449 0492                      l1481 02CE                      l1561 020F  
                    l1553 01F8                      l1299 0398                      l1467 036D  
                    l1459 035B                      l1475 038A                      l1491 0117  
                    l1539 01DC                      l1483 02EA                      l1571 023A  
                    l1563 0214                      l1555 01FE                      l1469 0377  
                    l1493 011E                      l1485 02F2                      l1549 042A  
                    l1581 0262                      l1573 0246                      l1565 021C  
                    l1557 0204                      l1671 00DC                      l1495 0123  
                    l1487 010C                      l1479 02C9                      l1591 0287  
                    l1583 0266                      l1575 024F                      l1567 0225  
                    l1559 020A                      l1673 03EE                      l1489 0111  
                    l1585 026C                      l1593 0288                      l1577 0257  
                    l1569 0231                      l1499 0124                      l1595 0290  
                    l1587 0277                      l1579 025E                      l1669 0136  
                    l1597 0298                      l1589 027D                      l1599 02A4  
                    STR_1 0424                      STR_2 041E                      STR_3 0421  
                    STR_4 041A              __CFG_WRT$OFF 0000         writeStrLCD@string 0074  
                    _cont 003C                      _main 01F3                      btemp 007E  
                    start 000C             __CFG_IESO$OFF 0000                     ??_ISR 0070  
             _writeIntLCD 0427                     ?_main 0070             __CFG_WDTE$OFF 0000  
         __end_of___lwdiv 0353                     i1l166 048A           __end_of___lwmod 038F  
             _writeStrLCD 02C9                     _PORTA 0005                     _PORTB 0006  
                   _PORTC 0007                     _PORTD 0008                     _PORTE 0009  
                   u53_20 0487                     u53_21 0486                     _TRISA 0085  
                   _TRISB 0086                     _TRISC 0087                     _TRISD 0088  
                   _TRISE 0089            __CFG_FCMEN$OFF 0000           __end_of_readADC 04B8  
         __end_of_initLCD 03C9           __end_of_dpowers 041A                     _setup 0471  
   __size_of_writeCharLCD 000F            __CFG_BOREN$OFF 0000                     pclath 000A  
                   status 0003                     wtemp0 007E           __end_of_sprintf 01F3  
          __CFG_MCLRE$OFF 0000           __initialization 000F              __end_of_main 02C9  
                  ??_main 003B              _writeCharLCD 0491                    _ADRESH 001E  
                  ?_setup 0070                    i1l1327 0481                    i1l1329 0487  
          __CFG_PWRTE$OFF 0000         writeIntLCD@buffer 0036      __size_of_configCanal 00ED  
       writeIntLCD@numero 003A                    _clcLCD 04AD                    _cmdLCD 045D  
               ??___lwdiv 0076                 ??___lwmod 0024                    _cursor 007A  
        __end_of_selCanal 04AD                 ??_readADC 0072                 ??_initLCD 0075  
                  saved_w 007E                 ??_sprintf 0029   __end_of__initialization 0018  
          __pcstackCOMMON 0070             __end_of_setup 0481        __size_of_configADC 0036  
                 ??_setup 0072                __pbssBANK0 003C             ?_setCursorLCD 0075  
              __pmaintext 01F3                   ?_clcLCD 0070                   ?_cmdLCD 0070  
              __pintentry 0004              ?_writeIntLCD 0070              ?_writeStrLCD 0074  
              __stringtab 0400            ??_setCursorLCD 0076                 ?_selCanal 0070  
       __end_of_configADC 03FF             setCursorLCD@x 0075             setCursorLCD@y 0077  
         __size_of_clcLCD 0007           __size_of_cmdLCD 0014                   ___lwdiv 030F  
                 ___lwmod 0353                 _ANSELbits 0188                   _contADC 003F  
                 __ptext1 0427                   __ptext2 02C9                   __ptext3 0491  
                 __ptext4 0109                   __ptext5 0353                   __ptext6 030F  
                 __ptext7 0471                   __ptext8 0445                   __ptext9 04A0  
                 _readADC 04B4                   _initLCD 038F              __size_of_ISR 0010  
                 _dpowers 0410                   _sensor1 003E                   _sensor2 003D  
                 _sprintf 0109      end_of_initialization 0018                ??_selCanal 0072  
               _TRISAbits 0085                 _TRISBbits 0086                 _TRISEbits 0089  
           ??_configCanal 0072            __end_of_clcLCD 04B4            __end_of_cmdLCD 0471  
    __end_of_setCursorLCD 045D      __size_of_writeIntLCD 001E       start_initialization 000F  
             __end_of_ISR 0491      __size_of_writeStrLCD 0046           selCanal@channel 0073  
__CFG_FOSC$INTRC_NOCLKOUT 0000                  ??_clcLCD 0075                  ??_cmdLCD 0072  
     __end_of_configCanal 0109               __pbssCOMMON 007A                 ___latbits 0002  
           __pcstackBANK0 0020        configCanal@channel 0074     writeCharLCD@character 0073  
             sprintf@flag 002D               sprintf@prec 002E         __size_of_selCanal 000D  
        ___lwdiv@dividend 0074                 cmdLCD@cmd 0074                  ?___lwdiv 0072  
                ?___lwmod 0020                 _configADC 03C9                 __pstrings 0400  
                ?_readADC 0070                  ?_initLCD 0070             ?_writeCharLCD 0070  
        ___lwdiv@quotient 0077                  ?_sprintf 0026            __size_of_setup 0010  
       interrupt_function 0004               _configCanal 001C                  _PIE1bits 008C  
                _PIR1bits 000C     __size_of_setCursorLCD 0018                ?_configADC 0070  
              _ADCON0bits 001F               __stringbase 040F                _ADCON1bits 009F  
          ??_writeCharLCD 0072              _setCursorLCD 0445          __size_of___lwdiv 0044  
        __size_of___lwmod 003C                  _adcValue 007B        __end_of__stringtab 0410  
              _ANSELHbits 0189                sprintf@val 002F          __size_of_readADC 0004  
        __size_of_initLCD 003A           ___lwdiv@divisor 0072           ___lwdiv@counter 0079  
                __ptext10 04B4                  __ptext11 038F                  __ptext12 001C  
                __ptext13 03C9                  __ptext14 04AD                  __ptext15 045D  
                __ptext16 0481         __CFG_BOR4V$BOR40V 0000          __size_of_sprintf 00EA  
           __size_of_main 00D6                  _selCanal 04A0               ??_configADC 0072  
           ??_writeIntLCD 0033             ??_writeStrLCD 0076                _INTCONbits 000B  
                intlevel1 0000                 sprintf@ap 002C                 sprintf@sp 0031  
        ___lwmod@dividend 0022      __end_of_writeCharLCD 04A0                 stringcode 040A  
                sprintf@c 0032                  sprintf@f 0026           ___lwmod@divisor 0020  
         ___lwmod@counter 0025                  stringdir 040A                  stringtab 0400  
     __end_of_writeIntLCD 0445       __end_of_writeStrLCD 030F             configADC@FOSC 0074  
            ?_configCanal 0070  
